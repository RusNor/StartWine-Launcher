#!/usr/bin/env python3

import os
import sys
from pathlib import Path
import subprocess
from subprocess import Popen, PIPE, run
from threading import Thread

link = f"{sys.argv[0]}/"
sw_path_link = Path(link).parent

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk as gtk
from gi.repository import Gio, GLib

from sw_crier import sw_crier

sw_path = Path(os.path.dirname(os.path.abspath(__file__))).parent.parent
sw_scripts = f"{sw_path}/data/scripts"

sw_shortcuts = f"{sw_path}/Shortcuts"

sw_fsh = Path(f"{sw_scripts}/sw_function.sh")
sw_rsh = Path(f"{sw_scripts}/sw_run.sh")
sw_run = Path(f"{sw_scripts}/sw_run")
sw_start = Path(f"{sw_scripts}/sw_start")
sw_main = Path(f"{sw_scripts}/sw_main")
sw_crier_path = Path(f"{sw_scripts}/sw_crier.py")
sw_localedir = Path(f"{sw_scripts}/locale")

sw_data = Path(f"{sw_path}/data")
sw_app_config = Path(f"{sw_data}/app_config")
sw_default_config = Path(f"{sw_app_config}/.default")
sw_defconf_read = sw_default_config.read_text().split('\n')

sw_local = Path(f"{Path.home()}/.local/share/applications")

################################___LANG___:

import locale
import gettext
_ = gettext.gettext

domain = 'StartWine'
locale.textdomain(domain)
locale.bindtextdomain(domain, sw_localedir)

lang_en = gettext.translation(domain, localedir=sw_localedir, languages=['en:en'])
lang_ru = gettext.translation(domain, localedir=sw_localedir, languages=['ru:en'])

get_lang = [lang for lang in sw_defconf_read if 'export SW_USE_LANG=' in lang]

if get_lang == ['export SW_USE_LANG=ru']:

    try:
        locale.setlocale(locale.LC_MESSAGES, ('ru_RU', 'UTF-8'))
        lang_ru.install
        _ = lang_ru.gettext
        print('<< sw_tray_ru_locale_is_set >>')

    except:
        print('<< sw_tray_ru_locale_not_found >>')
        locale.setlocale(locale.LC_MESSAGES, ('en_US', 'UTF-8'))
        lang_en.install
        _ = lang_en.gettext
        print('<< sw_tray_en_locale_is_set >>')
        pass

if get_lang == ['export SW_USE_LANG=en']:

    try:
        locale.setlocale(locale.LC_MESSAGES, ('en_US', 'UTF-8'))
        lang_en.install
        _ = lang_en.gettext
        print('<< sw_tray_en_locale_is_set >>')

    except:
        print('<< sw_tray_en_locale_not_found >>')
        pass

def get_app_path():

    app_default = f'env \"{sw_main}\" '
    app_path = str(sw_rsh.read_text()).replace(app_default, '')

    if not Path(app_path).suffix:
        app_path = f'StartWine'

    return app_path

def get_arg(arg):

    return arg

################################___REQUIRE_VERSION___:

appind = 1

try:
    gi.require_version('AyatanaAppIndicator3', '0.1')
    from gi.repository import AyatanaAppIndicator3 as appindicator
    print('Ayatana')
except:
    try:
        gi.require_version('AppIndicator3', '0.1')
        from gi.repository import AppIndicator3 as appindicator
        print('Indicator')
    except:
        appind = 0

APPINDICATOR_ID = 'StartWine'
DIRPATH = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

if appind == 1:

    def tray_main():

        menu = gtk.Menu()
        indicator = appindicator.Indicator.new(
            APPINDICATOR_ID, DIRPATH+"/img/gui_icons/sw-tray_x16.svg",
            appindicator.IndicatorCategory.APPLICATION_STATUS
            )
        indicator.set_status(
            appindicator.IndicatorStatus.ACTIVE
            )
        indicator.set_menu(tray_menu())
        gtk.main()
else:
    print('<< AppIndicator_not_found >>')

################################___TRAY_MENU___:

def tray_menu():

    ################################___STARTWINE_RUN___:

    def on_startwine(_):

        Popen(str(sw_main), shell=True)

    ################################___FAST_RUN___:

    def on_shortcuts_fr_item(_):

        fr_label = _.get_label()
        fr_name = _.get_name()

        if fr_label != f'StartWine':
            read_path = Path(fr_name).read_text().split('\n')[2].split('=')[1].split('"')[3]
            sw_rsh.write_text(f"env \"{sw_main}\" \"{read_path}\"")
            run_cmd = f"env \"{sw_run}\" \"{read_path}\""
            run(run_cmd, shell=True)

    ################################___SHORTCUTS_RUN___:

    def on_shortcuts_sc_item(_):

        sc_label = _.get_label()
        sc_name = _.get_name()

        if sc_label == f'StartWine':
            run(str(sw_main), shell=True)

        else:
            read_path = Path(sc_name).read_text().split('\n')[2].split('=')[1].split('"')[3]
            sw_rsh.write_text(f"env \"{sw_main}\" \"{read_path}\"")
            run(str(sw_rsh), shell=True)

    ################################___SETTINGS_RUN___:

    def settings(_):

        app_path = get_arg(get_app_path())

        cmd_settings = f"{sw_main} {app_path} --settings"
        Popen(cmd_settings, shell=True, start_new_session=True)

    ################################___STOP___:

    def kill(_):

        try:
            p = Popen(['ps', '-AF'], stdout=subprocess.PIPE, encoding='UTF-8')
            out, err = p.communicate()

            for line in out.splitlines():
                if 'sw_function.sh' in line:
                    pid = int(line.split()[1])
                    os.kill(pid, 9)
        except:
            pass

        cmd = f"{sw_scripts}/sw_stop"
        Popen(cmd, shell=True)

    ############################___EXIT___:

    def quit(_):

        gtk.main_quit()

    def tray_info():

        i = _('Oops! Nothing to run...\nCreate a shortcut in the menu')
        sw_crier.on_info(i)

    def on_check_sc(_):

        sc_path = [sc for sc in list(Path(sw_shortcuts).iterdir())]
        if sc_path == []:
            tray_info()

    ############################___MAIN_MENU___:

    def on_menu_restruct(menu_item):

        get_submenu = menu_item.get_submenu()
        menu_item_name = [item.get_name() for item in list(get_submenu.get_children())]
        menu_item_widget = [item for item in list(get_submenu.get_children())]
        sc_path = [sc for sc in sorted(list(Path(sw_shortcuts).iterdir()), key=lambda x: str(x).lower())]

        for widget in list(menu_item_widget):
            if not str(widget.get_name()) in str(sc_path):
                get_submenu.remove(widget)
#                print(widget.get_name())
        count = -1
        for sc in list(sc_path):
            count += 1
            if not str(sc) in str(menu_item_name):
                item_ = gtk.MenuItem.new_with_label('')
                item_.set_label(str(sc.stem))
                item_.set_name(str(sc))
                if menu_item == sc_menu_item:
                    item_.connect('activate', on_shortcuts_sc_item)
                if menu_item == fr_menu_item:
                    item_.connect('activate', on_shortcuts_fr_item)
                get_submenu.insert(item_, count)
                print(item_.get_name())
        menu_item.show_all()
        return True

    menu = gtk.Menu()

    cmd_startwine = gtk.MenuItem.new_with_label(_('Open StartWine'))
    cmd_startwine.connect('activate', on_startwine)
    menu.append(cmd_startwine)

    fr_menu_item = gtk.MenuItem.new_with_label(_('Fast run'))
    fr_menu_item.connect('activate', on_check_sc)
    menu.append(fr_menu_item)

    fr_submenu = gtk.Menu()
    fr_menu_item.set_submenu(fr_submenu)

    for fr in sorted(list(Path(sw_shortcuts).iterdir()), key=lambda x: str(x).lower()):
        fr_item = gtk.MenuItem.new_with_label('')
        fr_item.set_label(str(fr.stem))
        fr_item.set_name(str(fr))
        fr_item.connect('activate', on_shortcuts_fr_item)
        fr_submenu.append(fr_item)

    sc_menu_item = gtk.MenuItem.new_with_label(_('Shortcuts'))
    sc_menu_item.connect('activate', on_check_sc)
    menu.append(sc_menu_item)

    sc_submenu = gtk.Menu()
    sc_menu_item.set_submenu(sc_submenu)

    for sc in sorted(list(Path(sw_shortcuts).iterdir()), key=lambda x: str(x).lower()):
        sc_item = gtk.MenuItem.new_with_label('')
        sc_item.set_label(str(sc.stem))
        sc_item.set_name(str(sc))
        sc_item.connect('activate', on_shortcuts_sc_item)
        sc_submenu.append(sc_item)

    cmd_2 = gtk.MenuItem.new_with_label(_('Settings'))
    cmd_2.connect('activate', settings)
    menu.append(cmd_2)

    cmd_3 = gtk.MenuItem.new_with_label(_('Stop processes'))
    cmd_3.connect('activate', kill)
    menu.append(cmd_3)

    cmd_4 = gtk.MenuItem.new_with_label(_('Exit Tray'))
    cmd_4.connect('activate', quit)
    menu.append(cmd_4)

    GLib.timeout_add(1000, on_menu_restruct, sc_menu_item)
    GLib.timeout_add(1000, on_menu_restruct, fr_menu_item)
    menu.show_all()
    return menu

if __name__ == "__main__":
    tray_main()

