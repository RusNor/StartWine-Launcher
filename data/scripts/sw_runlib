#!/usr/bin/env bash

export START_WINE_PATH="$(cd "$(dirname "$(realpath "$0")")"/../../ && pwd)"

###############################   VERSION   ####################################

export SW_VER="403"
export UTILS_VER="2.5"

##############################...LOCALE...######################################

[ -f "${START_WINE_PATH}/data/scripts/sw_menu.json" ] && \
    export SW_LANG="$(grep -oE "en_US|ru_RU" "${START_WINE_PATH}/data/scripts/sw_menu.json")"

if [ "${SW_LANG}" == "en_US" ]; then
    export LANG="en_US"
else
    export LANG="ru_RU.UTF-8"
fi

. gettext.sh
export TEXTDOMAIN="StartWine"
export TEXTDOMAINDIR="${START_WINE_PATH}/data/scripts/locale"

##############################   FUNCTIONS TOOLS   #############################

print_error () {

    echo "ERROR: $@"

}

print_info () {

    echo "INFO: $@"

}

try_copy () {

    if [[ -f "$1" || -d "$1" || -L "$1" ]]; then
        cp -rf "$@" 2>/dev/null
        [ "$?" != 0 ] && print_error "failed to copy '$1' to '$2'" || return 0
    elif [ ! -n "$(dirname "$2" 2>/dev/null)" ]; then
        print_error "path for '$2' not found!"
    else
        print_error "'$1' not found for copy!"
    fi

    return 1

}

try_link () {

    if [[ -f "$1" || -d "$1" || -L "$1" ]]; then
        ln -sfr "$@" 2>/dev/null
        [ "$?" != 0 ] && print_error "failed to link '$1' to '$2'" || return 0
    elif [ ! -n "$(dirname "$2" 2>/dev/null)" ]; then
        print_error "path '$2' not found for link $1"
    else
        print_error "'$1' not found for link to '$2'"
    fi

    return 1

}

try_move () {

    if [[ -f "$1" || -d "$1" || -L "$1" ]]; then
        mv -f "$@" 2>/dev/null
        [ "$?" != 0 ] && print_error "failed to move '$1' to '$2'" || return 0
    elif [ ! -n "$(dirname "$2" 2>/dev/null)" ]; then
        print_error "path for '$2' not found!"
    else
        print_error "'$1' not found for move!"
    fi

    return 1

}

try_create_dir () {

    if [ ! -d "$1" ]; then
        mkdir -p "$1" 2>/dev/null
        [ "$?" != 0 ] && print_error "failed to create directory '$1'" ; return 1 || return 0
    fi

}

try_remove () {

    if [[ -f "$1" || -d "$1" || -L "$1" ]]; then
        rm -rf "$@" 2>/dev/null
        [ "$?" != 0 ] && print_error "failed to remove '$1'" || return 0
    else
        print_error "'$1' not found for remove!"
    fi

    return 1

}

try_winedlloverride_update () {

    if [ ! -z "${WINEDLLOVERRIDES}" ]; then
        export WINEDLLOVERRIDES="${1};${WINEDLLOVERRIDES}"
    else
        export WINEDLLOVERRIDES="${1}"
    fi

}

try_ld_library_path_update () {

    if [ ! -z "${LD_LIBRARY_PATH}" ]; then
        export LD_LIBRARY_PATH="${1}:${LD_LIBRARY_PATH}"
    else
        export LD_LIBRARY_PATH="${1}"
    fi

}

try_path_update () {

    if [ ! -z "${PATH}" ]; then
        export PATH="${1}:${PATH}"
    else
        export PATH="${1}"
    fi

}

try_clear_pfx () {

    try_remove "$WINEPREFIX/"*.reg
    try_remove "$WINEPREFIX/"*.log
    try_remove "$WINEPREFIX/dosdevices"
    try_remove "$WINEPREFIX/.update-timestamp"
    try_remove "$WINEPREFIX/drive_c/.windows-serial"
    try_remove "$WINEPREFIX/drive_c/windows"
    try_remove "$WINEPREFIX/drive_c/ProgramData/Setup"
    try_remove "$WINEPREFIX/drive_c/ProgramData/Windows"
    try_remove "$WINEPREFIX/drive_c/ProgramData/WindowsTask"
    try_remove "$WINEPREFIX/drive_c/ProgramData/Package Cache"
    try_remove "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Microsoft"
    try_remove "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Temp"
    try_remove "$WINEPREFIX/drive_c/users/Public/Local Settings/Temporary Internet Files"
    try_remove "$WINEPREFIX/drive_c/users/Public/Application Data/Microsoft"
    try_remove "$WINEPREFIX/drive_c/users/Public/Application Data/wine_gecko"
    try_remove "$WINEPREFIX/drive_c/users/Public/Temp"
    try_remove "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Microsoft"
    try_remove "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Temp"
    try_remove "$WINEPREFIX/drive_c/users/user/Local Settings/Temporary Internet Files"
    try_remove "$WINEPREFIX/drive_c/users/user/Application Data/Microsoft"
    try_remove "$WINEPREFIX/drive_c/users/user/Application Data/wine_gecko"
    try_remove "$WINEPREFIX/drive_c/users/user/Temp"
    try_remove "$WINEPREFIX/drive_c/Program Files/Internet Explorer"
    try_remove "$WINEPREFIX/drive_c/Program Files/Windows Media Player"
    try_remove "$WINEPREFIX/drive_c/Program Files/Windows NT"
    try_remove "$WINEPREFIX/drive_c/Program Files/Common Files"
    try_remove "$WINEPREFIX/drive_c/Program Files (x86)/Internet Explorer"
    try_remove "$WINEPREFIX/drive_c/Program Files (x86)/Common Files"
    try_remove "$WINEPREFIX/drive_c/Program Files (x86)/Windows Media Player"
    try_remove "$WINEPREFIX/drive_c/Program Files (x86)/Windows NT"

}

prefix_init_error () {

    clear
    echo "There is a problem initializing the Wine prefix!"
    try_clear_pfx
    "$CRIER" -e "$(eval_gettext "Error initializing the Wine prefix")"
    exit 1

}

libraries_init_error () {

    clear
    echo "Error installing libraries, try again!"
    try_clear_pfx
    "$CRIER" -e "$(eval_gettext "Error installing libraries, try again")"
    exit 1

}

sw_win_ver () {

    if [[ -z `cat "${WINEPREFIX}/system.reg" | grep "Windows $SW_USE_WINDOWS_VER"` ]]; then
        if [ ! -z "${SW_USE_WINDOWS_VER}" ] && [ `echo "$SW_USE_WINDOWS_VER" | sed 's/.*/\L&/'` == "xp" ]; then
            if [ "${WINEARCH}" != "win32" ]; then
                export SW_USE_WINDOWS_VER="xp64"
            else
                export SW_USE_WINDOWS_VER="xp"
            fi
        fi
        "${WINELOADER}" winecfg -v `echo "win${SW_USE_WINDOWS_VER}" | sed 's/.*/\L&/'`
        echo "Set to win-${SW_USE_WINDOWS_VER}"
    fi

}

try_fix_pfx () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c/windows/system32/start.exe" ]; then
        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w
    fi

    if [ "${SW_USE_DISABLE_UPDATE_PFX}" == 1 ]; then
        if [ "$(cat ${WINEPREFIX}/.update-timestamp)" != "disable" ]; then
            echo disable > "${WINEPREFIX}/.update-timestamp"
        fi
    else
        if [ "$(cat ${WINEPREFIX}/.update-timestamp)" == "disable" ]; then
            try_remove "${WINEPREFIX}/.update-timestamp"
        fi
    fi

    if [ -d "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/share/default_pfx/drive_c/openxr" ]; then
        try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/share/default_pfx/drive_c/openxr" "${WINEPREFIX}/drive_c"
    fi

    if [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/i386-windows/vrclient.dll" ]; then
        if [ ! -f "${WINEPREFIX}/drive_c/vrclient/bin/vrclient.dll" ]; then
            try_create_dir "${WINEPREFIX}/drive_c/vrclient/bin"
            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib64/wine/x86_64-windows/vrclient_x64.dll" "${WINEPREFIX}/drive_c/vrclient/bin"
            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/i386-windows/vrclient.dll" "${WINEPREFIX}/drive_c/vrclient/bin"
        fi
    fi

    if [ -f "${WINEPREFIX}/system.reg" ]; then
        if ! grep -qo "\"e:\"=\"cdrom\"" "${WINEPREFIX}/system.reg" 2>/dev/null ; then
            echo -e "\n[Software\\\\\\Wine\\\\\\Drives]\n\"e:\"=\"cdrom\"" >> "${WINEPREFIX}/system.reg"
        fi
    else
        print_error 'system.reg not found in prefix!'
        return 1
    fi

    try_rm_broken_link() { find -L "$1" -maxdepth 1 -type l -exec rm -rfv {} \; 2>/dev/null; }

    check_wine_drive() { ls -l "$WINEPREFIX/dosdevices"/[a-z]: 2>/dev/null|grep -w "${1}$"|grep -o '[a-z]:' &>/dev/null; }

    try_create_dir "${WINEPREFIX}/dosdevices"
    check_wine_drive 'drive_c' || (rm -f "$DRIVE_C" && try_link "$WINEPREFIX/drive_c" "$DRIVE_C")
    check_wine_drive "${START_WINE_PATH}/data/tmp/cdrom" \
    || (rm -f "$DRIVE_E" && ln -sf "${START_WINE_PATH}/data/tmp/cdrom" "$DRIVE_E")
    check_wine_drive "$HOME" || (rm -f "$DRIVE_H" && ln -sf "$HOME" "$DRIVE_H")
    check_wine_drive '/' || (rm -f "$DRIVE_Z" && ln -sf '/' "$DRIVE_Z")

    (DRIVES=(d f g i j k l m n o p q r s t u v w x y)
    DEF_MP_DIRS=('/media' "/media/$USER" '/mnt' '/run/media' "/run/media/$USER")
    IFS=$'\n' MP_DIRS=($(find "${DEF_MP_DIRS[@]}" -maxdepth 1 -type d 2>/dev/null|sort -u))
    try_rm_broken_link "$WINEPREFIX/dosdevices" &>/dev/null

    for mp in "${MP_DIRS[@]}" ; do
        if [[ ! "${DEF_MP_DIRS[@]}" =~ "$mp" ]] && mountpoint -q "$mp" ; then
            if ! check_wine_drive "$mp" ; then
                drive_num=0
                while true ; do
                    if [[ "$drive_num" -le "${#DRIVES[@]}" ]]; then
                        drive_path="$WINEPREFIX/dosdevices/${DRIVES[$drive_num]}:"
                        if [ ! -d "$drive_path" ]; then
                            ln -sf "$mp" "$drive_path"
                            break
                        else
                            drive_num="$(( $drive_num + 1 ))"
                            continue
                        fi
                    else
                        break
                    fi
                done
            fi
        fi
    done)

    for comprt in {1..32} ; do
        if [ ! -L "$WINEPREFIX/dosdevices/com$comprt" ]; then
            ln -sf "/dev/ttyS$(( $comprt - 1 ))" "$WINEPREFIX/dosdevices/com$comprt"
        fi
    done

    if [ ! -d "${WINEPREFIX}/drive_c/users/${USER}" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/users/steamuser"
        try_link "${WINEPREFIX}/drive_c/users/steamuser" "${WINEPREFIX}/drive_c/users/${USER}"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/Application Data" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/users/steamuser/AppData/Roaming"
        try_link "${WINEPREFIX}/drive_c/users/steamuser/AppData/Roaming" "${WINEPREFIX}/drive_c/users/steamuser/Application Data"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/My Documents" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents"
        try_link "${WINEPREFIX}/drive_c/users/steamuser/Documents" "${WINEPREFIX}/drive_c/users/steamuser/My Documents"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/Games" ]; then
        try_link "${START_WINE_PATH}/Games" "${WINEPREFIX}/drive_c/Games"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/Public/Documents/Steam" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/users/Public/Documents/Steam"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/Documents/Steam" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents/Steam"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/Program Files (x86)/Steam/steamapps" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/Program Files (x86)/Steam/steamapps"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/Program Files (x86)/Steam/config" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/Program Files (x86)/Steam/config"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/Users/User" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/Users/User"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/Users/Default" ]; then
        try_create_dir "${WINEPREFIX}/drive_c/Users/Default"
    fi

    if [ ! -f "${WINEPREFIX}/drive_c/windows/Fonts/"arial.ttf ]; then
        try_create_dir "${WINEPREFIX}/drive_c/windows/Fonts"
        export SW_FONTS="${WINEDIR}/share/fonts"
        export SW_WINE_FONTS="${WINEDIR}/share/wine/fonts"
        export SW_PFX_FONTS="${WINEPREFIX}/drive_c/windows/Fonts"
        try_copy "${SW_FONTS}/"arial.ttf "${SW_PFX_FONTS}/"arial.ttf || try_copy "${SW_WINE_FONTS}/"arial.ttf "${SW_PFX_FONTS}/"arial.ttf
        try_copy "${SW_FONTS}/"arialbd.ttf "${SW_PFX_FONTS}/"arialbd.ttf || try_copy "${SW_WINE_FONTS}/"arialbd.ttf "${SW_PFX_FONTS}/"arialbd.ttf
        try_copy "${SW_FONTS}/"cour.ttf "${SW_PFX_FONTS}/"cour.ttf || try_copy "${SW_WINE_FONTS}/"cour.ttf "${SW_PFX_FONTS}/"cour.ttf
        try_copy "${SW_FONTS}/"courbd.ttf "${SW_PFX_FONTS}/"courbd.ttf || try_copy "${SW_WINE_FONTS}/"courbd.ttf "${SW_PFX_FONTS}/"courbd.ttf
        try_copy "${SW_FONTS}/"georgia.ttf "${SW_PFX_FONTS}/"georgia.ttf || try_copy "${SW_WINE_FONTS}/"georgia.ttf "${SW_PFX_FONTS}/"georgia.ttf
        try_copy "${SW_FONTS}/"malgun.ttf "${SW_PFX_FONTS}/"malgun.ttf || try_copy "${SW_WINE_FONTS}/"malgun.ttf "${SW_PFX_FONTS}/"malgun.ttf
        try_copy "${SW_FONTS}/"micross.ttf "${SW_PFX_FONTS}/"micross.ttf || try_copy "${SW_WINE_FONTS}/"micross.ttf "${SW_PFX_FONTS}/"micross.ttf
        try_copy "${SW_FONTS}/"msgothic.ttc "${SW_PFX_FONTS}/"msgothic.ttc || try_copy "${SW_WINE_FONTS}/"msgothic.ttc "${SW_PFX_FONTS}/"msgothic.ttc
        try_copy "${SW_FONTS}/"msyh.ttf "${SW_PFX_FONTS}/"msyh.ttf || try_copy "${SW_WINE_FONTS}/"msyh.ttf "${SW_PFX_FONTS}/"msyh.ttf
        try_copy "${SW_FONTS}/"nirmala.ttf "${SW_PFX_FONTS}/"nirmala.ttf || try_copy "${SW_WINE_FONTS}/"nirmala.ttf "${SW_PFX_FONTS}/"nirmala.ttf
        try_copy "${SW_FONTS}/"simsun.ttc "${SW_PFX_FONTS}/"simsun.ttc || try_copy "${SW_WINE_FONTS}/"simsun.ttc "${SW_PFX_FONTS}/"simsun.ttc
        try_copy "${SW_FONTS}/"times.ttf "${SW_PFX_FONTS}/"times.ttf || try_copy "${SW_WINE_FONTS}/"times.ttf "${SW_PFX_FONTS}/"times.ttf
        try_copy "${SW_FONTS}/"marlett.ttf "${SW_PFX_FONTS}/"marlett.ttf || try_copy "${SW_WINE_FONTS}/"marlett.ttf "${SW_PFX_FONTS}/"marlett.ttf
        try_copy "${SW_FONTS}/"symbol.ttf "${SW_PFX_FONTS}/"symbol.ttf || try_copy "${SW_WINE_FONTS}/"symbol.ttf "${SW_PFX_FONTS}/"symbol.ttf
        try_copy "${SW_FONTS}/"tahoma.ttf "${SW_PFX_FONTS}/"tahoma.ttf || try_copy "${SW_WINE_FONTS}/"tahoma.ttf "${SW_PFX_FONTS}/"tahoma.ttf
        try_copy "${SW_FONTS}/"tahomabd.ttf "${SW_PFX_FONTS}/"tahomabd.ttf || try_copy "${SW_WINE_FONTS}/"tahomabd.ttf "${SW_PFX_FONTS}/"tahomabd.ttf
        try_copy "${SW_FONTS}/"webdings.ttf "${SW_PFX_FONTS}/"webdings.ttf || try_copy "${SW_WINE_FONTS}/"webdings.ttf "${SW_PFX_FONTS}/"webdings.ttf
        try_copy "${SW_FONTS}/"wingding.ttf "${SW_PFX_FONTS}/"wingding.ttf || try_copy "${SW_WINE_FONTS}/"wingding.ttf "${SW_PFX_FONTS}/"wingding.ttf
    fi

    chmod -R 775 "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"

}

sw_shortcuts_autoinstall () {

    export SW_GAME_EXE="${WINEPREFIX}/${SW_USE_EXE}"
    export SW_GAME_NAME="$(basename "${SW_GAME_EXE}" | sed 's/\.exe//gi' | sed 's/\.msi//gi' | sed 's/ /_/g')"
    export SW_GAME_PATH="$(cd "$(dirname "${SW_GAME_EXE}")" >/dev/null 2>&1 && pwd)"

    export SW_ICO_TMP_PATH="${START_WINE_PATH}/data/tmp/icons"
    "$CRIER" -ico "${SW_GAME_EXE}" "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.ico"
    convert "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.ico" "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png"

    [ ! -f "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png" ] && \
        try_copy "$(ls -S -1 "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}"*[_-]*.png 2>/dev/null | head -1)" "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png" 2>/dev/null

    convert -resize 480X480 "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png"
    try_remove "${SW_ICO_TMP_PATH}/"*.png

    export GUI_NAME_H="$(basename -s .jpg "${COPY_ICON_H}" | tr -s '[:punct:]' ' ')"
    export GUI_NAME_V="$(basename -s .jpg "${COPY_ICON_V}" | tr -s '[:punct:]' ' ')"
    export PARSE_NAME="$(echo "${SW_GAME_NAME}" | tr -d '[:punct:]')"
    try_copy "${COPY_ICON_H}" "${START_WINE_PATH}/data/img/app_icons/horizontal/${PARSE_NAME}_${GUI_NAME_H}_x256.jpg"
    try_copy "${COPY_ICON_V}" "${START_WINE_PATH}/data/img/app_icons/vertical/${PARSE_NAME}_${GUI_NAME_V}_x256.jpg"

    echo "Exec=\"${SW_GAME_EXE}\"" > "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.swd"

    if [ ! -f "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" ]; then
        if [ -f "${START_WINE_PATH}/data/app_config/.default/${SW_GAME_NAME}" ]; then
            cat "${START_WINE_PATH}/data/app_config/.default/${SW_GAME_NAME}" > "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
            chmod +x "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        else
            cat "${START_WINE_PATH}/data/app_config/.default/default" > "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
            chmod +x "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        fi
    fi

}

try_link_d3d_plugins () {

    if [ "${SW_USE_D3D_PLUGINS}" == 1 ]; then

        for sw_d3d_plugins in d3dcompiler_33 d3dcompiler_34 d3dcompiler_35 \
            d3dcompiler_36 d3dcompiler_37 d3dcompiler_38 d3dcompiler_39 d3dcompiler_40 \
            d3dcompiler_41 d3dcompiler_42 d3dcompiler_43 d3dcompiler_46 d3dcompiler_47 \
            d3dx10_33 d3dx10_34 d3dx10_35 d3dx10_36 d3dx10_37 d3dx10_38 d3dx10_39 d3dx10_40 \
            d3dx10_41 d3dx10_42 d3dx10_43 d3dx10 d3dx11_42 d3dx11_43 d3dx9_24 d3dx9_25 d3dx9_26 \
            d3dx9_27 d3dx9_28 d3dx9_29 d3dx9_30 d3dx9_31 d3dx9_32 d3dx9_33 d3dx9_34 d3dx9_35 \
            d3dx9_36 d3dx9_37 d3dx9_38 d3dx9_39 d3dx9_40 d3dx9_41 d3dx9_42 d3dx9_43 ; do

            if [ "${WINEARCH}" != "win32" ]; then
                try_link "${START_WINE_PATH}/data/tools/utils/d3d_extras/x64/${sw_d3d_plugins}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                try_link "${START_WINE_PATH}/data/tools/utils/d3d_extras/x32/${sw_d3d_plugins}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
            else
                try_link "${START_WINE_PATH}/data/tools/utils/d3d_extras/x32/${sw_d3d_plugins}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            fi

            try_winedlloverride_update "${sw_d3d_plugins}=n"
        done
    else
        for sw_d3d_plugins in d3dcompiler_33 d3dcompiler_34 d3dcompiler_35 \
            d3dcompiler_36 d3dcompiler_37 d3dcompiler_38 d3dcompiler_39 d3dcompiler_40 \
            d3dcompiler_41 d3dcompiler_42 d3dcompiler_43 d3dcompiler_46 d3dcompiler_47 \
            d3dx10_33 d3dx10_34 d3dx10_35 d3dx10_36 d3dx10_37 d3dx10_38 d3dx10_39 d3dx10_40 \
            d3dx10_41 d3dx10_42 d3dx10_43 d3dx10 d3dx11_42 d3dx11_43 d3dx9_24 d3dx9_25 d3dx9_26 \
            d3dx9_27 d3dx9_28 d3dx9_29 d3dx9_30 d3dx9_31 d3dx9_32 d3dx9_33 d3dx9_34 d3dx9_35 \
            d3dx9_36 d3dx9_37 d3dx9_38 d3dx9_39 d3dx9_40 d3dx9_41 d3dx9_42 d3dx9_43 ; do

            try_winedlloverride_update "${sw_d3d_plugins}=b"
        done
    fi

}

try_get_wine_ver () {

    url_list=(
        "https://api.github.com/repos/Kron4ek/Wine-Builds/releases"
        "https://api.github.com/repos/RusNor/Wine-Steam-Proton/releases"
        "https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"
        "https://api.github.com/repos/GloriousEggroll/wine-ge-custom/releases"
    )

    grep_url() { grep 'browser_download_url'|grep -iEo 'https.*download.*\.tar\.gz|https.*download.*\.tar\.xz|https.*download.*\.tar\.zst'|sed "s/.*-x86.tar.xz//g" ; }

    export staging_ver=$(curl -s "${url_list[0]}"|grep_url|tr -d '"'|tr '\n' ' ')
    export steam_proton_ver=$(curl -s "${url_list[1]}"|grep_url|tr -d '"'|tr '\n' ' ')
    export proton_ge_ver=$(curl -s "${url_list[2]}"|grep_url|tr -d '"'|tr '\n' ' ')
    export lutris_ge_ver=$(curl -s "${url_list[3]}"|grep_url|tr -d '"'|tr '\n' ' ')

    for staging in $staging_ver ; do
        [[ $staging == *"staging-amd64"* && $staging != *"rc1"* ]] && \
            staging_list+="$staging "
        [[ $staging == *"staging-tkg-amd64"* && $staging != *"rc1"* ]] && \
            staging_tkg_list+="$staging "
    done

    for lutris_ge in $lutris_ge_ver ; do
        [[ "$lutris_ge" != *"LoL"* && "$lutris_ge" != *"lol"* ]] && \
            lutris_ge_list+="$lutris_ge "
    done

    echo "{" > "${START_WINE_PATH}/data/scripts/wine_version.json"
    echo "\"wine_staging\": \"${staging_list[*]}\"," >> "${START_WINE_PATH}/data/scripts/wine_version.json"
    echo "\"wine_steam_proton\": \"$steam_proton_ver\"," >> "${START_WINE_PATH}/data/scripts/wine_version.json"
    echo "\"wine_proton_ge\": \"$proton_ge_ver\"," >> "${START_WINE_PATH}/data/scripts/wine_version.json"
    echo "\"wine_staging_tkg\": \"${staging_tkg_list[*]}\"," >> "${START_WINE_PATH}/data/scripts/wine_version.json"
    echo "\"wine_lutris_ge\": \"${lutris_ge_list[*]}\"" >> "${START_WINE_PATH}/data/scripts/wine_version.json"
    echo "}" >> "${START_WINE_PATH}/data/scripts/wine_version.json"

}

try_update_sw () {

    GIT_VER="$(curl "https://api.github.com/repos/RusNor/StartWine-Launcher/releases" | grep "tag_name" | head -1 | sed "s/.*StartWine_v//" | sed "s/\".*//")"

    if [ -z "$GIT_VER" ]; then
        "$CRIER" -e "$(eval_gettext "Сheck internet connection")"
    else
        if [[ "${SW_VER}" -lt "$GIT_VER" ]]; then
            msg="$(eval_gettext "Update to \$GIT_VER version?")"
            crier=`"$CRIER" -q "$msg"`
            if [ "$(echo $crier)" == "0" ]; then

                [ ! -f "${HOME}/.config/swrc" ] && \
                    echo "${START_WINE_PATH}" > "${HOME}/.config/swrc"

                [ -f "${START_WINE_PATH}/data/tmp/StartWine_v$GIT_VER.tar.xz" ] && \
                    try_remove "${START_WINE_PATH}/data/tmp/StartWine_v$GIT_VER.tar.xz"

                [ -d "${START_WINE_PATH}/data/tmp/StartWine" ] && \
                    try_remove "${START_WINE_PATH}/data/tmp/StartWine"

                export FTP_URL="https://github.com/RusNor/StartWine-Launcher/releases/download/StartWine_v$GIT_VER/StartWine_v$GIT_VER.tar.xz"
                "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/StartWine_v$GIT_VER.tar.xz" &&
                "$CRIER" -tar "${START_WINE_PATH}/data/tmp/StartWine_v$GIT_VER.tar.xz" "${START_WINE_PATH}/data/tmp" &&
                echo "Extension release $GIT_VER done"

                if [ -d "${START_WINE_PATH}/data/tmp/StartWine" ]; then

                    [ -f "${START_WINE_PATH}/data/scripts/sw_menu.json" ] && \
                        try_copy "${START_WINE_PATH}/data/scripts/sw_menu.json" "${START_WINE_PATH}/data/tmp"

                    [ -d "${START_WINE_PATH}/data/scripts" ] && \
                        try_remove "${START_WINE_PATH}/data/scripts"

                    [ -d "${START_WINE_PATH}/data/img/gui_icons" ] && \
                        try_remove "${START_WINE_PATH}/data/img/gui_icons"

                    [ -d "${START_WINE_PATH}/data/img/sw_themes/sounds" ] && \
                        try_remove "${START_WINE_PATH}/data/img/sw_themes/sounds"

                    [ -d "${START_WINE_PATH}/data/img/sw_themes/css/assets" ] && \
                        try_remove "${START_WINE_PATH}/data/img/sw_themes/css/assets"

                    [ -d "${START_WINE_PATH}/data/img/sw_themes/css/dark" ] && \
                        try_remove "${START_WINE_PATH}/data/img/sw_themes/css/dark"

                    [ -d "${START_WINE_PATH}/data/img/sw_themes/css/light" ] && \
                        try_remove "${START_WINE_PATH}/data/img/sw_themes/css/light"

                    [ -f "${START_WINE_PATH}/data/img/sw_themes/css/default.css" ] && \
                        try_remove "${START_WINE_PATH}/data/img/sw_themes/css/default.css"

                    [ -d "${START_WINE_PATH}/data/img/launcher_icons" ] && \
                        try_remove "${START_WINE_PATH}/data/img/launcher_icons"

                    try_copy "${START_WINE_PATH}/data/tmp/StartWine/data" "${START_WINE_PATH}"

                    [ -f "${START_WINE_PATH}/data/tmp/sw_menu.json" ] && \
                        try_copy "${START_WINE_PATH}/data/tmp/sw_menu.json" "${START_WINE_PATH}/data/scripts"

                    [ -f "${START_WINE_PATH}/data/tmp/sw_menu.json" ] && \
                        try_remove "${START_WINE_PATH}/data/tmp/sw_menu.json"

                    [ -d "${START_WINE_PATH}/data/tmp/StartWine" ] && \
                        try_remove "${START_WINE_PATH}/data/tmp/StartWine"

                    [ -f "${START_WINE_PATH}/data/tmp/StartWine_v$GIT_VER.tar.xz" ] && \
                        try_remove "${START_WINE_PATH}/data/tmp/StartWine_v$GIT_VER.tar.xz"

                    try_get_wine_ver

                    "$CRIER" -i "$(eval_gettext 'The update is completed successfully. Restart StartWine for the changes to take effect.')"
                fi
            fi
        else
            try_get_wine_ver

            "$CRIER" -i "$(eval_gettext 'This is the latest version of StartWine. There is nothing more to do.')"
        fi
    fi

}

TRY_REGEDIT_PATCH () {

    "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/${SW_USE_REGEDIT_PATCH}" "$@"

}

###############################   WINELOADER   #################################

export SW_GAME_EXE="$(readlink -f "$1")"
export SW_GAME_NAME="$(basename "${SW_GAME_EXE}" | sed 's/\.exe//gi' | sed 's/\.msi//gi' | sed 's/\.bat//gi' | sed 's/\.lnk//gi' | sed 's/ /_/g')"
export SW_GAME_PATH="$(cd "$(dirname "${SW_GAME_EXE}")" >/dev/null 2>&1 && pwd)"

if [ "${SW_GAME_NAME}" == "" ]; then
    if [ ! -f "${START_WINE_PATH}/data/app_config/StartWine" ]; then
        cat "${START_WINE_PATH}/data/app_config/.default/default" > "${START_WINE_PATH}/data/app_config/StartWine"
        chmod +x "${START_WINE_PATH}/data/app_config/StartWine"
    fi
    . "${START_WINE_PATH}/data/app_config/StartWine"
else
    if [ ! -f "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" ]; then
        if [ -f "${START_WINE_PATH}/data/app_config/.default/${SW_GAME_NAME}" ]; then
            cat "${START_WINE_PATH}/data/app_config/.default/${SW_GAME_NAME}" > "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
            chmod +x "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        else
            cat "${START_WINE_PATH}/data/app_config/.default/default" > "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
            chmod +x "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        fi
    fi
    . "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
fi

export WINEDIR="${START_WINE_PATH}/data/wine/${SW_USE_WINE}"

try_ld_library_path_update "${WINEDIR}/lib"
try_ld_library_path_update "${WINEDIR}/lib64"

try_path_update "${WINEDIR}/bin"

export WINEARCH="${SW_USE_WINEARCH}"
export WINELOADER="${WINEDIR}/bin/wine"
export WINESERVER="${WINEDIR}/bin/wineserver"
export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"

###############################   EXPORT   #####################################

export RADV_PERFTEST="gpl"
export DXVK_VER="${SW_USE_DXVK_VER}"
export VKD3D_VER="${SW_USE_VKD3D_VER}"
export DRIVE_C="$WINEPREFIX/dosdevices/c:"
export DRIVE_E="$WINEPREFIX/dosdevices/e:"
export DRIVE_H="$WINEPREFIX/dosdevices/h:"
export DRIVE_Z="$WINEPREFIX/dosdevices/z:"
export SW_DESKTOP_DIR="$(xdg-user-dir DESKTOP)"
export CRIER="${START_WINE_PATH}/data/scripts/sw_crier.py"
export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"
export SW_RUN_RUNIMAGE="${START_WINE_PATH}/data/runtime/sw_runtime"

##################################   CREATE   ##################################

try_create_dir "${START_WINE_PATH}/Games"
try_create_dir "${START_WINE_PATH}/data/tmp"
try_create_dir "${START_WINE_PATH}/data/pfx"
try_create_dir "${START_WINE_PATH}/data/wine"
try_create_dir "${START_WINE_PATH}/Shortcuts"
try_create_dir "${START_WINE_PATH}/data/tools"
try_create_dir "${START_WINE_PATH}/data/tmp/logs"
try_create_dir "${START_WINE_PATH}/data/tmp/icons"
try_create_dir "${HOME}/.local/share/applications"
try_create_dir "${START_WINE_PATH}/data/pfx_backup"
try_create_dir "${START_WINE_PATH}/data/tmp/cdrom"
try_create_dir "${START_WINE_PATH}/data/tools/vulkan"
try_create_dir "${START_WINE_PATH}/data/pfx/pfx_default"
try_create_dir "${START_WINE_PATH}/data/tmp/gstreamer-1.0"
try_create_dir "${START_WINE_PATH}/data/tmp/gl_shader_cache"
try_create_dir "${START_WINE_PATH}/data/tmp/vulkan_shader_cache"

[ ! -f "${START_WINE_PATH}/data/scripts/version" ] && \
    echo "${SW_VER}" > "${START_WINE_PATH}/data/scripts/version"

if [ ! -f "${HOME}/.local/share/applications/StartWine.desktop" ] && [ ! -f "/usr/share/applications/StartWine.desktop" ]; then
    sw_desktop_name="StartWine.desktop"
    echo "[Desktop Entry]" > "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Name=StartWine" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Exec=env \"${SW_RUN_RUNIMAGE}\" \"${START_WINE_PATH}/data/scripts/sw_start\" %F" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Comment[en_GB]=Launch Windows applications on Linux operating systems" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Comment[ru]=Запуск приложений Windows в операционных системах Linux" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Type=Application" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "MimeType=application/x-wine-extension-msp;application/x-msi;application/x-ms-dos-executable;" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Categories=Game;" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Icon=${START_WINE_PATH}/data/img/gui_icons/sw_icon.svg" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    chmod +x "${HOME}/.local/share/applications/${sw_desktop_name}"
fi

if [ ! -f "${HOME}/.local/share/applications/StartWine-Run.desktop" ] && [ ! -f "/usr/share/applications/StartWine-Run.desktop" ]; then
    sw_desktop_name="StartWine-Run.desktop"
    echo "[Desktop Entry]" > "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Name=StartWine-Run" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Exec=env \"${SW_RUN_RUNIMAGE}\" \"${START_WINE_PATH}/data/scripts/sw_start\" %F --run" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Comment[en_GB]=Launch Windows applications on Linux operating systems" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Comment[ru]=Запуск приложений Windows в операционных системах Linux" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Type=Application" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "MimeType=application/x-wine-extension-msp;application/x-msi;application/x-ms-dos-executable;" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Categories=Game;" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "NoDisplay=true" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Icon=${START_WINE_PATH}/data/img/gui_icons/sw_icon.svg" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    chmod +x "${HOME}/.local/share/applications/${sw_desktop_name}"
fi

############################   SETTINGS OPTIONS   ##############################

if [ "${SW_USE_MANGOHUD}" == 1 ]; then
    export MANGOHUD=1
    export MANGOHUD_LOG_LEVEL=off

    [ "${SW_HUD_SIZE}" == "" ] && \
        export SW_HUD_SIZE="$("$CRIER" -hud)"

    export MANGOHUD_CONFIG="fps_color_change,round_corners=10,no_display,cpu_load_change,gpu_load_change,core_load_change,background_alpha=0.2\
    ,font_size=${SW_HUD_SIZE},background_color=020202,fps_limit=${SW_USE_FPS_LIMIT}+0,toggle_fps_limit=Shift_L+F1\
    ,position=top-right,toggle_hud=Shift_R+F12,${SW_USE_MANGOHUD_CONFIG},toggle_hud_position=R_Shift+F11"
fi

if [ "${SW_USE_GAMEMODE}" == 1 ]; then
    export SW_RUN_GAMEMODE="gamemoderun"
fi

if [ "${SW_USE_VIRTUAL_DESKTOP}" == 1 ]; then
    VDESKTOP="explorer /desktop=`xrandr --current | grep "*" | awk '{print $1;}' | head -1`"
fi

if [ "${SW_USE_FSYNC}" == 1 ]; then
    export WINEFSYNC=1
    export WINEFSYNC_FUTEX2=1
else
    unset WINEFSYNC WINEFSYNC_FUTEX2
fi

if [ "${SW_USE_ESYNC}" == 1 ]; then
    export WINEESYNC=1
else
    unset WINEESYNC
fi

if [ "${SW_USE_OLD_GL_STRING}" == 1 ]; then
    export MESA_EXTENSION_MAX_YEAR="2003"
    export __GL_ExtensionStringVersion="17700"
fi

if [ "${SW_USE_NVAPI_DISABLE}" == 1 ]; then
    try_winedlloverride_update "nvapi,nvapi64,nvcuda,nvcuvid,nvencodeapi,nvencodeapi64="
else
    if [ -d "${WINEDIR}/lib/wine/nvapi" ]; then
        if [ "${WINEARCH}" != "win32" ]; then
            [ -f "${WINEDIR}/lib/wine/nvapi/nvapi.dll" ] && \
                try_copy "${WINEDIR}/lib/wine/nvapi/nvapi.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
            [ -f "${WINEDIR}/lib64/wine/nvapi/nvapi64.dll" ] && \
                try_copy "${WINEDIR}/lib64/wine/nvapi/nvapi64.dll" "${WINEPREFIX}/drive_c/windows/system32"
        else
            [ -f "${WINEDIR}/lib/wine/nvapi/nvapi.dll" ] && \
                try_copy "${WINEDIR}/lib/wine/nvapi/nvapi.dll" "${WINEPREFIX}/drive_c/windows/system32"
        fi
    fi

    try_winedlloverride_update "nvapi,nvapi64=n;nvcuda=b"

fi

if [ "${SW_USE_WINEDBG_DISABLE}" == 1 ]; then
    export WINEDEBUG="-all"
    try_winedlloverride_update "winedbg.exe="
else
    export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"
fi

if [ "${SW_USE_LARGE_ADDRESS_AWARE}" == 1 ]; then
    export WINE_LARGE_ADDRESS_AWARE=1
else
    unset WINE_LARGE_ADDRESS_AWARE
fi

if [ "${SW_USE_STAGING_WRITECOPY}" == 1 ]; then
    export STAGING_WRITECOPY=1
else
    unset STAGING_WRITECOPY
fi

if [ "${SW_USE_WINE_SIMULATE_WRITECOPY}" == 1 ]; then
    export WINE_SIMULATE_WRITECOPY=1
else
    unset WINE_SIMULATE_WRITECOPY
fi

if [ "${SW_USE_STAGING_SHARED_MEMORY}" == 1 ]; then
    export STAGING_SHARED_MEMORY=1
else
    unset STAGING_SHARED_MEMORY
fi

if [ "${SW_USE_DXVK_HUD}" == 1 ]; then
    export DXVK_FRAME_RATE="${SW_USE_FPS_LIMIT}"
    export DXVK_HUD="devinfo,fps,frametimes,version,api,scale=0.9"
fi

if [ "${SW_USE_DXVK_ASYNC}" == 1 ]; then
    export DXVK_ASYNC=1
else
    unset DXVK_ASYNC
fi

if [ "${SW_USE_ENABLE_VKBASALT}" == 1 ]; then
    export ENABLE_VKBASALT=1
    export VKBASALT_LOG_LEVEL="none"
    export VKBASALT_LOG_FILE="${START_WINE_PATH}/data/tmp/logs/vkBasalt.log"
    export VKBASALT_SHADER_PATH="${START_WINE_PATH}/data/tools/utils/vkBasalt/shaders"
    export VKBASALT_CONFIG_FILE="${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf"

    if [ -f "${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf" ]; then
        sed -ri "s/effects = .*/effects = ${SW_USE_VKBASALT_EFFECTS}/g" "${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf"
        sed -ri "s/casSharpness .*/casSharpness = ${SW_USE_VKBASALT_CAS}/g" "${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf"
    fi

fi

if [ "${SW_USE_FSR}" == 1 ]; then
    export WINE_FULLSCREEN_FSR=1
    export WINE_FULLSCREEN_FSR_STRENGTH=2
    export WINE_FULLSCREEN_INTEGER_SCALING=0
    export WINE_FULLSCREEN_FSR_MODE="${SW_USE_FSR_MODE}"
else
    unset WINE_FULLSCREEN_FSR WINE_FULLSCREEN_FSR_STRENGTH WINE_FULLSCREEN_INTEGER_SCALING WINE_FULLSCREEN_FSR_MODE WINE_FULLSCREEN_FAKE_CURRENT_RES
fi

if [ "${SW_USE_GSTREAMER}" == 1 ]; then
    export GST_DEBUG="0:WARNING"
    export WINE_GST_REGISTRY_DIR="${START_WINE_PATH}/data/tmp/gstreamer-1.0"
    export MEDIACONV_AUDIO_DUMP_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/audio.foz"
    export MEDIACONV_VIDEO_DUMP_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/video.foz"
    export MEDIACONV_AUDIO_TRANSCODED_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/transcoded_audio.foz"
    export MEDIACONV_VIDEO_TRANSCODED_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/transcoded_video.foz"
    export GST_PLUGIN_SYSTEM_PATH_1_0="${WINEDIR}/lib64/gstreamer-1.0:${WINEDIR}/lib/gstreamer-1.0"
fi

if [ "${SW_USE_DRI_PRIME}" == 1 ]; then
    export __NV_PRIME_RENDER_OFFLOAD=1
    export DRI_PRIME=1
fi

if [ "${SW_USE_WINE_MONO}" == 0 ]; then
    try_winedlloverride_update "mscoree,mshtml="
fi

if [ "${SW_USE_BATTLEYE}" == 1 ]; then
    export PROTON_BATTLEYE_RUNTIME="${START_WINE_PATH}/data/tools/utils/Proton BattlEye Runtime"
    try_winedlloverride_update "beclient,beclient_x64=b,n"
else
    unset PROTON_BATTLEYE_RUNTIME
fi

if [ "${SW_USE_EASYANTICHEAT}" == 1 ]; then
    export PROTON_EAC_RUNTIME="${START_WINE_PATH}/data/tools/utils/Proton EasyAntiCheat Runtime"
else
    unset PROTON_EAC_RUNTIME
fi

if [ "${SW_USE_VSYNC_DISABLE}" == 1 ]; then
    export vblank_mode=0
    export __GL_SYNC_TO_VBLANK=0
fi

if [ "${SW_USE_HIDE_NVIDIA_GPU}" == 1 ]; then
    export WINE_HIDE_NVIDIA_GPU=1
fi

if [ "${SW_USE_DGVOODOO2}" == 1 ]; then
    for copy_dgvoodoo2 in d3dimm ddraw glide glide2x glide3x ; do
        if [ "${WINEARCH}" != "win32" ]; then
            try_link "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/dgVoodoo.conf" "${WINEPREFIX}/drive_c/windows/syswow64"
            try_copy "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/x32/${copy_dgvoodoo2}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
        else
            try_link "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/dgVoodoo.conf" "${WINEPREFIX}/drive_c/windows/system32"
            try_copy "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/x32/${copy_dgvoodoo2}.dll" "${WINEPREFIX}/drive_c/windows/system32"
        fi
        try_winedlloverride_update "${copy_dgvoodoo2}=n"
    done
fi

if [ "${SW_USE_DLSS}" == 1 ] && [ "${SW_USE_NVAPI_DISABLE}" == 0 ]; then

    if [ ! -z "$(lspci | grep -o 'RTX')" ] && [ ! -z "$(lsmod | grep 'nvidia')" ]; then

        export DXVK_NVAPIHACK=0
        export DXVK_ENABLE_NVAPI=1

        if [ ! -f "${WINEPREFIX}/drive_c/windows/system32/nvngx.dll" ] || [ ! -f "${WINEPREFIX}/drive_c/windows/system32/_nvngx.dll" ]; then
            try_link "/usr/lib/nvidia/wine/_nvngx.dll" "${WINEPREFIX}/drive_c/windows/system32"
            try_link "/usr/lib/nvidia/wine/nvngx.dll" "${WINEPREFIX}/drive_c/windows/system32"
        fi

        if [ -f "${START_WINE_PATH}/data/tools/utils/dlss_extras/lib64/wine/x86_64-windows/nvml.dll" ]; then
            if [ "${WINEARCH}" != "win32" ]; then
                try_copy "${START_WINE_PATH}/data/tools/utils/dlss_extras/lib64/wine/x86_64-windows/nvml.dll" "${WINEPREFIX}/drive_c/windows/system32"
                try_copy "${START_WINE_PATH}/data/tools/utils/dlss_extras/lib32/wine/i386-windows/nvml.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
            else
                try_copy "${START_WINE_PATH}/data/tools/utils/dlss_extras/lib32/wine/i386-windows/nvml.dll" "${WINEPREFIX}/drive_c/windows/system32"
            fi
        fi

        try_winedlloverride_update "nvml,nvngx=n"

    fi

fi

if [ "${SW_USE_SHADER_CACHE}" == 1 ]; then
    export __GL_SHADER_DISK_CACHE_PATH="${START_WINE_PATH}/data/tmp/gl_shader_cache"
    export __GL_SHADER_DISK_CACHE_SIZE="1000000000"
    export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
    export __GL_SHADER_DISK_CACHE=1
    export MESA_SHADER_CACHE_DIR="${START_WINE_PATH}/data/tmp"
    export MESA_DISK_CACHE_SINGLE_FILE=1
else
    export __GL_SHADER_DISK_CACHE=0
    export MESA_SHADER_CACHE_DISABLE=1
    unset __GL_SHADER_DISK_CACHE_SKIP_CLEANUP __GL_SHADER_DISK_CACHE_SIZE __GL_SHADER_DISK_CACHE_PATH MESA_DISK_CACHE_SINGLE_FILE MESA_GLSL_CACHE_DIR MESA_GLSL_CACHE_MAX_SIZE
fi

###############################   OVERRIDE DLL   ###############################

try_winedlloverride_update "lsteamclient,winemenubuilder.exe="

try_winedlloverride_update "steam_api,steam_api64,steamclient,steamclient64=n"

[ "${SW_USE_WINEDLLOVERRIDES}" != "" ] && \
    try_winedlloverride_update "${SW_USE_WINEDLLOVERRIDES}"

[ "${SW_USE_LAUNCH_PARAMETERS}" != "" ] && \
    export LAUNCH_PARAMETERS="${SW_USE_LAUNCH_PARAMETERS}"

[ "${SW_USE_WINE_CPU_TOPOLOGY}" != "" ] && \
    export WINE_CPU_TOPOLOGY="${SW_USE_WINE_CPU_TOPOLOGY}"

###############################   DXVK DOWNLOAD   ##############################

if [ ! -d "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x64" ]; then

    export URL_DXVK_LIST=(
       "https://huggingface.co/SudoNano/sw_repo/resolve/main/vulkan/dxvk-${DXVK_VER}.tar.gz?download=true"
       "https://github.com/doitsujin/dxvk/releases/download/v${DXVK_VER}/dxvk-${DXVK_VER}.tar.gz"
    )

    "$CRIER" -d "${URL_DXVK_LIST[0]}" "${START_WINE_PATH}/data/tmp/dxvk-${DXVK_VER}.tar.gz" \
    || "$CRIER" -d "${URL_DXVK_LIST[1]}" "${START_WINE_PATH}/data/tmp/dxvk-${DXVK_VER}.tar.gz"
    "$CRIER" -tar "${START_WINE_PATH}/data/tmp/dxvk-${DXVK_VER}.tar.gz" "${START_WINE_PATH}/data/tools/vulkan"
    [ -f "${START_WINE_PATH}/data/tmp/dxvk-${DXVK_VER}.tar.gz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/dxvk-${DXVK_VER}.tar.gz"
    [ -f "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/setup_dxvk.sh" ] && \
        try_remove "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/setup_dxvk.sh"
fi

###############################   VKD3D DOWNLOAD   #############################

if [ ! -d "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x64" ]; then

    export URL_VKD3D_LIST=(
       "https://huggingface.co/SudoNano/sw_repo/resolve/main/vulkan/vkd3d-proton-${VKD3D_VER}.tar.zst?download=true"
       "https://github.com/HansKristian-Work/vkd3d-proton/releases/download/v${VKD3D_VER}/vkd3d-proton-${VKD3D_VER}.tar.zst"
    )

    "$CRIER" -d "${URL_VKD3D_LIST[0]}" "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar.zst" \
    || "$CRIER" -d "${URL_VKD3D_LIST[1]}" "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar.zst"
    unzstd "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar.zst" &&
    "$CRIER" -tar "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar" "${START_WINE_PATH}/data/tools/vulkan"
    [ -f "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar.zst" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar.zst"
    [ -f "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/vkd3d-proton-${VKD3D_VER}.tar"
    [ -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/setup_vkd3d_proton.sh" ] && \
        try_remove "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/setup_vkd3d_proton.sh"
fi

############################   UTILS DOWNLOAD   ################################

if [ ! -f "${START_WINE_PATH}/data/tools/utils/version" ]; then

    [ -d "${START_WINE_PATH}/data/tools/utils" ] && \
        try_remove "${START_WINE_PATH}/data/tools/utils"

    [ -f "${START_WINE_PATH}/data/tmp/utils-v${UTILS_VER}.tar.xz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/utils-v${UTILS_VER}.tar.xz"

    export URL_UTILS_LIST=(
       "https://huggingface.co/SudoNano/sw_repo/resolve/main/utils_data/utils-v${UTILS_VER}.tar.xz?download=true"
       "https://github.com/RusNor/Utils-data/releases/download/utils-v${UTILS_VER}/utils-v${UTILS_VER}.tar.xz"
    )

    "$CRIER" -d "${URL_UTILS_LIST[0]}" "${START_WINE_PATH}/data/tmp/utils-v${UTILS_VER}.tar.xz" \
    || "$CRIER" -d "${URL_UTILS_LIST[1]}" "${START_WINE_PATH}/data/tmp/utils-v${UTILS_VER}.tar.xz"
    "$CRIER" -tar "${START_WINE_PATH}/data/tmp/utils-v${UTILS_VER}.tar.xz" "${START_WINE_PATH}/data/tools"
    [ -f "${START_WINE_PATH}/data/tmp/utils-v${UTILS_VER}.tar.xz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/utils-v${UTILS_VER}.tar.xz"
    echo "$UTILS_VER" > "${START_WINE_PATH}/data/tools/utils/version"
fi

##############################   PFX DEFAULT DOWNLOAD  #########################

if [ ! -f "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" ]; then

    export URL_PFX_LIST=(
       "https://huggingface.co/SudoNano/sw_repo/resolve/main/pfx_backup/pfx_default.iso?download=true"
       "https://github.com/RusNor/pfx_backup/releases/download/pfx_default/pfx_default.iso"
    )

    "$CRIER" -d "${URL_PFX_LIST[0]}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" \
    || "$CRIER" -d "${URL_PFX_LIST[1]}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"
fi

if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_default/drive_c/windows/system32/start.exe" ]; then
    if [ -f "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" ]; then
        [ -d "${START_WINE_PATH}/data/pfx/pfx_default" ] && \
            try_remove "${START_WINE_PATH}/data/pfx/pfx_default"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/pfx_default" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"
    fi
fi

##############################   RUN VULKAN   ##################################

RUN_VULKAN () {

    if [ "${SW_USE_OPENGL}" == "1" ]; then

        try_fix_pfx

        sw_win_ver

        try_link_d3d_plugins

        unset VK_INSTANCE_LAYERS

        if [ "${WINEARCH}" != "win32" ]; then
            for wine_build_dll in d3d12 d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                [ -f "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" ] && \
                    try_copy "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                [ -f "${WINEDIR}/lib64/wine/x86_64-windows/${wine_build_dll}.dll" ] && \
                    try_copy "${WINEDIR}/lib64/wine/x86_64-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
            for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                [ -f "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                    try_copy "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                [ -f "${WINEDIR}/lib64/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                    try_copy "${WINEDIR}/lib64/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
        else
            for wine_build_dll in d3d12 d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                [ -f "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" ] && \
                    try_copy "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
            for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                [ -f "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                    try_copy "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
        fi

        try_winedlloverride_update "d3d12,d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=b"

        try_winedlloverride_update "openvr_api_dxvk,d3d12core="

        echo "OpenGL mode"

        notify-send -t 1500 -a "StartWine" "$(eval_gettext "OpenGL mode")"

        if [ "${SW_USE_MANGOHUD}" == 1 ]; then
            export SW_RUN_MANGOHUD="mangohud --dlsym"
        fi

        if [ "${SW_USE_GALLIUM_HUD}" == 1 ]; then
            export GALLIUM_HUD_PERIOD=0.1
            export GALLIUM_HUD=".d.w320fps+.d.w320frametime+.d.w320cpu+.d.w320GPU-load+.d.w320memory-clock+.d.w320VRAM-usage+.d.w320temperature"
        fi

        [ "${SW_USE_LANG_MODE}" != "" ] && \
            export LANG="${SW_USE_LANG_MODE}"

        cd "${SW_GAME_PATH}"

        ${SW_RUN_GAMEMODE} ${SW_RUN_MANGOHUD} "${WINELOADER}" ${VDESKTOP} "$@" ${LAUNCH_PARAMETERS}

    else

        try_fix_pfx

        sw_win_ver

        try_link_d3d_plugins

        if [ "${WINEARCH}" != "win32" ]; then

            if [ "${SW_USE_DXVK_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/bin" ]; then
                    for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        [ -f "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        [ -f "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x64/${wine_dxvk_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x64/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                else
                    for wine_dxvk_dll in openvr_api_dxvk d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/dxvk/${wine_dxvk_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib64/wine/dxvk/${wine_dxvk_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib64/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                    [ -f "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" ] && \
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                    [ -f "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x64/${wine_dxvk_dll}.dll" ] && \
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x64/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done
            fi

            if [ "${SW_USE_VKD3D_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/bin" ]; then
                    if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/d3d12core.dll" ]; then
                        for wine_vkd3d_dll in d3d12 ; do
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/d3d12core.dll"
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                        done
                    else
                        for wine_vkd3d_dll in d3d12 d3d12core ; do
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        done
                    fi
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib64/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done

                    for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                        [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib64/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib64/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/d3d12core.dll" ]; then
                    for wine_vkd3d_dll in d3d12 ; do
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/d3d12core.dll"
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                    done
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi

                for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                    [ -f "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                        try_copy "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                    [ -f "${WINEDIR}/lib64/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                        try_copy "${WINEDIR}/lib64/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done

            fi

        else

            if [ "${SW_USE_DXVK_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/bin" ]; then
                    for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        [ -f "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                else
                    for wine_dxvk_dll in openvr_api_dxvk d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/dxvk/${wine_dxvk_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                    [ -f "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" ] && \
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/dxvk-${DXVK_VER}/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done
            fi

            if [ "${SW_USE_VKD3D_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/bin" ]; then
                    if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/d3d12core.dll" ]; then
                        for wine_vkd3d_dll in d3d12 ; do
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                        done
                    else
                        for wine_vkd3d_dll in d3d12 d3d12core ; do
                            try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        done
                    fi
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done

                    for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                        [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                            try_copy "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/d3d12core.dll" ]; then
                    for wine_vkd3d_dll in d3d12 ; do
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                    done
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-${VKD3D_VER}/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi

                for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                    [ -f "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" ] && \
                        try_copy "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done

            fi

        fi

        try_winedlloverride_update "libvkd3d-1,libvkd3d-shader-1,d3d12,d3d12core,openvr_api_dxvk,d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=n"

        if [ "${SW_USE_SHADER_CACHE}" == 1 ]; then
            try_create_dir "${START_WINE_PATH}/data/tmp/vulkan_shader_cache/$SW_GAME_NAME"
            export DXVK_CONFIG_FILE="${START_WINE_PATH}/data/tools/utils/config/dxvk.conf"
            export DXVK_STATE_CACHE_PATH="${START_WINE_PATH}/data/tmp/vulkan_shader_cache/$SW_GAME_NAME"
            export DXVK_STATE_CACHE=1
            export DXVK_LOG_LEVEL="none"
            export DXVK_LOG_PATH="none"

            export VKD3D_SHADER_CACHE_PATH="${START_WINE_PATH}/data/tmp/vulkan_shader_cache/$SW_GAME_NAME"
            export VKD3D_FEATURE_LEVEL="12_1"
            export VKD3D_SHADER_DEBUG="none"
            export VKD3D_DEBUG="none"
        else
            export DXVK_STATE_CACHE=0
            unset DXVK_CONFIG_FILE DXVK_STATE_CACHE_PATH DXVK_LOG_LEVEL DXVK_LOG_PATH VKD3D_SHADER_CACHE_PATH VKD3D_FEATURE_LEVEL VKD3D_SHADER_DEBUG VKD3D_DEBUG
        fi

        echo "VULKAN mode"

        notify-send -t 1500 -a "StartWine" "$(eval_gettext "VULKAN mode")"

        if [ "${SW_USE_MESA_OVERLAY_HUD}" == 1 ]; then
            export VK_LAYER_MESA_OVERLAY_CONFIG="position=top-right"
            export VK_INSTANCE_LAYERS="$VK_INSTANCE_LAYERS:VK_LAYER_MESA_overlay"
        fi

        [ "${SW_USE_LANG_MODE}" != "" ] && \
            export LANG="${SW_USE_LANG_MODE}"

        cd "${SW_GAME_PATH}"

        ${SW_RUN_GAMEMODE} "${WINELOADER}" ${VDESKTOP} "$@" ${LAUNCH_PARAMETERS}

    fi

}

###############################   CREATE SHORTCUT   ############################

CREATE_ICON () {

    if [ ! -f "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png" ]; then
        export SW_ICO_TMP_PATH="${START_WINE_PATH}/data/tmp/icons"
        "$CRIER" -ico "${SW_GAME_EXE}" "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.ico"
        convert "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.ico" "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png"

        [ ! -f "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png" ] && \
            try_copy "$(ls -S -1 "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}"*[_-]*.png 2>/dev/null | head -1)" "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png" 2>/dev/null

        convert -resize 480X480 "${SW_ICO_TMP_PATH}/${SW_GAME_NAME}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png"
        try_remove "${SW_ICO_TMP_PATH}/"*.png
    fi

}

CREATE_SHORTCUT () {

    crier=`"$CRIER" -q "$(eval_gettext 'Create a prefix for this application?')"`

    if [ "$(echo $crier)" == "0" ]; then
        export SW_USE_PFX="pfx_${SW_GAME_NAME}"
    else
        export SW_USE_PFX="pfx_default"
        sed -i "s%pfx_${SW_GAME_NAME}%pfx_default%" "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
    fi

    CREATE_ICON

    echo "Exec=\"${SW_GAME_EXE}\"" > "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.swd"

    [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/bin/cabextract" ] && \
        try_remove "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/bin/cabextract"

    if [ ! -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then
        WINEBOOT_CS
    else
        if [ "${SW_USE_PFX}" != "pfx_default" ]; then
            crier=`"$CRIER" -q "$(eval_gettext "Restore prefix from backup?")"`
            if [ "$(echo $crier)" == "0" ]; then
                try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" &&
                try_copy "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}" "${START_WINE_PATH}/data/app_config"
                try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
            else
                 WINEBOOT_CS
            fi
        fi
    fi

}

WINEBOOT_CS () {

    crier=`"$CRIER" -q "$(eval_gettext "You have a backup of the default prefix with recommended libraries. Use it to create a new prefix?")"`

    if [ "$(echo $crier)" == "0" ]; then

        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        if [ "${REIN_PFX}" == 1 ]; then
            "$CRIER" -i "$(eval_gettext "Restore prefix completed successfully")"
        fi

    else
        try_fix_pfx

        if [ "${REIN_PFX}" == 1 ]; then
            "$CRIER" -i "$(eval_gettext "Reinstall prefix completed successfully")"
        fi

    fi

}

ADD_SHORTCUT_TO_MENU () {

    if [ ! -f "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop" ]; then
        echo "[Desktop Entry]" > "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop"
        echo "Name=${CUSTOME_GAME_NAME}" >> "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop"
        echo "Exec=env \"${SW_RUN_RUNIMAGE}\" \"${START_WINE_PATH}/data/scripts/sw_start\" \"${SW_GAME_EXE}\" --run" >> "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop"
        echo "Type=Application" >> "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop"
        echo "Categories=Game;" >> "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop"
        echo "Icon=${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png" >> "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop"
        chmod +x "${HOME}/.local/share/applications/${CUSTOME_GAME_NAME}.desktop"
    fi

}

ADD_SHORTCUT_TO_DESKTOP () {

    if [ ! -f "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop" ]; then
        echo "[Desktop Entry]" > "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop"
        echo "Name=${CUSTOME_GAME_NAME}" >> "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop"
        echo "Exec=env \"${SW_RUN_RUNIMAGE}\" \"${START_WINE_PATH}/data/scripts/sw_start\" \"${SW_GAME_EXE}\" --run" >> "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop"
        echo "Type=Application" >> "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop"
        echo "Categories=Game;" >> "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop"
        echo "Icon=${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png" >> "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop"
        chmod +x "${SW_DESKTOP_DIR}/${CUSTOME_GAME_NAME}.desktop"
    fi

}

ADD_SHORTCUT_TO_STEAM () {

    for STEAM_ID in "$HOME/.steam/root/userdata/"* ; do

        if [ -f "$STEAM_ID/config/licensecache" ]; then

            export STEAM_USERDATA_PATH="$STEAM_ID/config"
            export SHORTCUTS_VDF="$STEAM_USERDATA_PATH/shortcuts.vdf"
            export APP_NAME="${CUSTOME_GAME_NAME}"
            export EXE_PATH="\"env\""
            export START_DIR="\"${SW_GAME_PATH}\""
            export ICON_PATH="${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png"
            export LAUNCH_OPTIONS="\"${SW_RUN_RUNIMAGE}\" \"${START_WINE_PATH}/data/scripts/sw_run\" \"${SW_GAME_EXE}\""
            export ID_RHEX="$(printf "%03x%03x%02x\n" $((RANDOM%4096)) $((RANDOM%4096)) $((RANDOM%256)))"
            export ID_HEX="\x$(awk '{$1=$1}1' FPAT='.{2}' OFS="\\\x" <<< "$ID_RHEX")"

            if [ -f "$SHORTCUTS_VDF" ]; then
                truncate -s-2 "$SHORTCUTS_VDF"
                export PREV_DATA="$(grep -aPo '\x00[0-9]\x00\x02appid' "$SHORTCUTS_VDF" | tail -n1 | tr -dc '0-9')"
                export NEW_DATA=$((PREV_DATA + 1))
            else
                printf '\x00%s\x00' "shortcuts" > "$SHORTCUTS_VDF"
                export NEW_DATA=0
            fi

            add_shortcut () {

                printf '\x00%s\x00' "$NEW_DATA"
                printf '\x02%s\x00%b' "appid" "$ID_HEX"
                printf '\x01%s\x00%s\x00' "appname" "$APP_NAME"
                printf '\x01%s\x00%s\x00' "Exe" "$EXE_PATH"
                printf '\x01%s\x00%s\x00' "StartDir" "$START_DIR"
                printf '\x01%s\x00%s\x00' "icon" "$ICON_PATH"
                printf '\x01%s\x00\x00' "ShortcutPath" "${START_WINE_PATH}/Shortcuts"
                printf '\x01%s\x00%s\x00' "LaunchOptions" "$LAUNCH_OPTIONS"
                printf '\x02%s\x00\x00\x00\x00\x00' "IsHidden"
                printf '\x02%s\x00\x00\x00\x00\x00' "AllowDesktopConfig"
                printf '\x02%s\x00\x00\x00\x00\x00' "AllowOverlay"
                printf '\x02%s\x00\x00\x00\x00\x00' "openvr"
                printf '\x02%s\x00\x00\x00\x00\x00' "Devkit"
                printf '\x01%s\x00\x00' "DevkitGameID"
                printf '\x02%s\x00\x00\x00\x00\x00' "LastPlayTime"
                printf '\x00%s\x00' "tags"
                printf '\x08'
                printf '\x08'
                printf '\x08'
                printf '\x08'

            }

            add_shortcut >> "$SHORTCUTS_VDF"

        fi

    done

}

#################################   PREFIX TOOLS   #############################

REMOVE_PFX () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to remove the prefix?")"`
    if [ "$(echo $crier)" == "0" ]; then
        try_remove "${START_WINE_PATH}/data/pfx/pfx_${SW_GAME_NAME}"
        try_remove "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.swd"
        try_remove "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
        try_remove "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png"

        FORMAT_GAME_NAME="$(echo ${SW_GAME_NAME} | sed 's/_//g')"
        APP_ON_DESKTOP="$(ls "$START_WINE_PATH/data/img/app_icons/horizontal" | grep "${FORMAT_GAME_NAME}" | cut -d "_" -f3 | head -n1)"

        [ "$APP_ON_DESKTOP" != "" ] && \
            try_remove "${SW_DESKTOP_DIR}/${APP_ON_DESKTOP}.desktop" \
            try_remove "${HOME}/.local/share/applications/${APP_ON_DESKTOP}.desktop"

        [ "${SW_GAME_NAME}" != "StartWine" ] && \
            try_remove "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop" \
            try_remove "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"

        notify-send -t 1500 -a "StartWine" "$(eval_gettext "Shortcut and prefix \${SW_GAME_NAME} removed")"
    fi

}

REINSTALL_PFX () {

    if [ "${SW_USE_PFX}" == "pfx_default" ]; then
        crier=`"$CRIER" -q "$(eval_gettext "Do you really want to reinstall the default prefix?")"`
        if [ "$(echo $crier)" == "0" ]; then
            try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
            unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" &&
            "$CRIER" -i "$(eval_gettext "Restore completed successfully")"
        fi
    else
        crier=`"$CRIER" -q "$(eval_gettext "Do you really want to reinstall the prefix?")"`
        if [ "$(echo $crier)" == "0" ]; then
            if [ ! -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then
                crier=`"$CRIER" -q "$(eval_gettext "Remove old prefix?")"`
                if [ "$(echo $crier)" == "0" ]; then
                    try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                    export REIN_PFX=1
                    WINEBOOT_CS
                fi
            else
                crier=`"$CRIER" -q "$(eval_gettext "Restore prefix from backup?")"`
                if [ "$(echo $crier)" == "0" ]; then
                    try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                    unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" &&
                    try_copy "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}" "${START_WINE_PATH}/data/app_config"

                    [ -f "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}" ] && \
                        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"

                    "$CRIER" -i "$(eval_gettext "Restore prefix completed successfully")"
                else
                    crier=`"$CRIER" -q "$(eval_gettext "Remove old prefix?")"`
                    if [ "$(echo $crier)" == "0" ]; then
                        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                        export REIN_PFX=1
                        WINEBOOT_CS
                    fi
                fi
            fi
        fi
    fi

}

SW_PFX_BACKUP () {

    if [ "${SW_USE_PFX}" == "pfx_default" ]; then
        "$CRIER" -i "$(eval_gettext "You can not overwrite the default prefix backup")"
    else
        crier=`"$CRIER" -q "$(eval_gettext "Do you really want to backup the prefix?")"`
        if [ "$(echo $crier)" == "0" ]; then
            if [ -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then
                crier=`"$CRIER" -q "$(eval_gettext "Overwrite old backup?")"`
                if [ "$(echo $crier)" == "0" ]; then
                    try_copy "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                    try_remove "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso"
                    mksquashfs "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
                    try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
                    "$CRIER" -i "$(eval_gettext "Backup completed successfully")"
                fi
            else
                try_copy "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                try_remove "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso"
                mksquashfs "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
                try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
                "$CRIER" -i "$(eval_gettext "Backup completed successfully")"
            fi
        fi
    fi

}

SW_PFX_RESTORE () {

    if [ "${SW_USE_PFX}" == "pfx_default" ]; then
        crier=`"$CRIER" -q "$(eval_gettext "Do you really want to restore the prefix?")"`
        if [ "$(echo $crier)" == "0" ]; then
            if [ -f "${START_WINE_PATH}/data/pfx_backup/pfx_${SW_GAME_NAME}.iso" ]; then
                try_remove "${START_WINE_PATH}/data/pfx/pfx_${SW_GAME_NAME}"
                unsquashfs -d "${START_WINE_PATH}/data/pfx/pfx_${SW_GAME_NAME}" "${START_WINE_PATH}/data/pfx_backup/pfx_${SW_GAME_NAME}.iso" &&
                try_copy "${START_WINE_PATH}/data/pfx/pfx_${SW_GAME_NAME}/${SW_GAME_NAME}" "${START_WINE_PATH}/data/app_config"
                try_remove "${START_WINE_PATH}/data/pfx/pfx_${SW_GAME_NAME}/${SW_GAME_NAME}"
                sed -i "s%pfx_default%pfx_${SW_GAME_NAME}%" "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
                "$CRIER" -i "$(eval_gettext "Restore completed successfully")"
            else
                crier=`"$CRIER" -q "$(eval_gettext "Do you really want to restore the default prefix?")"`
                if [ "$(echo $crier)" == "0" ]; then
                    try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                    unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" &&
                    "$CRIER" -i "$(eval_gettext "Restore completed successfully")"
                fi
            fi
        fi
    else
        crier=`"$CRIER" -q "$(eval_gettext "Do you really want to restore the prefix?")"`
        if [ "$(echo $crier)" == "0" ]; then
            if [ -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then
                try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" &&
                try_copy "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}" "${START_WINE_PATH}/data/app_config"
                try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
                "$CRIER" -i "$(eval_gettext "Restore completed successfully")"
            else
                "$CRIER" -i "$(eval_gettext "You do not have a backup create it first")"
            fi
        fi
    fi

}

SW_PFX_FULL_BACKUP () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to backup all the prefixes?")"`
    if [ "$(echo $crier)" == "0" ]; then
        if [ -f "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" ]; then
            crier=`"$CRIER" -q "$(eval_gettext "Overwrite old backup?")"`
            if [ "$(echo $crier)" == "0" ]; then
                try_remove "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso"
                mksquashfs "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
                "$CRIER" -i "$(eval_gettext "Full backup completed successfully")"
            fi
        else
            mksquashfs "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
            "$CRIER" -i "$(eval_gettext "Full backup completed successfully")"
        fi
    fi

}

SW_PFX_FULL_RESTORE () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to restore all the prefixes?")"`
    if [ "$(echo $crier)" == "0" ]; then
        if [ ! -f "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" ]; then
            "$CRIER" -i "$(eval_gettext "You do not have a backup create it first")"
        else
            crier=`"$CRIER" -q "$(eval_gettext "Would you like to save the current prefixes?")"`
            if [ "$(echo $crier)" == "0" ]; then
                mv "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_old"
                unsquashfs -d "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" &&
                "$CRIER" -i "$(eval_gettext "Full Restore completed successfully")"
            else
                try_remove "${START_WINE_PATH}/data/pfx"
                unsquashfs -d "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" &&
                "$CRIER" -i "$(eval_gettext "Full Restore completed successfully")"
            fi
        fi
    fi

}

SW_CLEAR_PFX () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to clear the prefix?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_clear_pfx
    fi

}

##################################   WINE TOOLS   ##############################

WINECFG () {

    try_fix_pfx

    "${WINELOADER}" "winecfg"

}

WINECONSOLE () {

    try_fix_pfx

    cd "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c"
    "${WINELOADER}" "wineconsole"

}

REGEDIT () {

    try_fix_pfx

    "${WINELOADER}" "regedit"

}

WINEFILE () {

    try_fix_pfx

    "${WINELOADER}" ${VDESKTOP} "explorer"

}

UNINSTALLER () {

    try_fix_pfx

    cd "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c"
    "${WINELOADER}" "uninstaller"

}

SW_WINETRICKS () {

    unset VK_INSTANCE_LAYERS

    [ -f "${START_WINE_PATH}/data/scripts/winetricks" ] && \
        try_remove "${START_WINE_PATH}/data/scripts/winetricks"

    export FTP_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
    "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/scripts/winetricks"
    chmod +x "${START_WINE_PATH}/data/scripts/winetricks"

    try_fix_pfx

    export WINE="${WINELOADER}"

    "${START_WINE_PATH}/data/scripts/winetricks" -q -f ${DLL} || libraries_init_error
    "${WINESERVER}" -w

    if [ "${INSTALL_OK}" == 1 ]; then
        "$CRIER" -i "$(eval_gettext "Application installed successfully")"
    else
        "$CRIER" -i "$(eval_gettext "Libraries installed successfully")"
    fi

}

CREATE_PFX_DEFAULT () {

    unset VK_INSTANCE_LAYERS

    [ -f "${START_WINE_PATH}/data/scripts/winetricks" ] && \
        try_remove "${START_WINE_PATH}/data/scripts/winetricks"

    export FTP_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
    "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/scripts/winetricks" &&
    chmod +x "${START_WINE_PATH}/data/scripts/winetricks"

    GE_VER="8-32"
    WINE_OK=1
    WINE_3

    export SW_USE_PFX="pfx_default"
    export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
    export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
    export WINELOADER=$WINEDIR/bin/wine
    export WINE="${WINELOADER}"

    try_remove "${START_WINE_PATH}/data/pfx/pfx_default"

    "${START_WINE_PATH}/data/scripts/winetricks" -q -f mfc120 mfc42 msvcirt openal physx vb6run vcrun2005 vcrun2008 vcrun2010 \
    vcrun2012 vcrun2013 vcrun2019 vcrun2022 vcrun6 vcrun6sp6 lucida nocrashdialog || libraries_init_error
    "${WINESERVER}" -w

    "$CRIER" -i "$(eval_gettext "Libraries installed successfully")"

    try_remove "$WINEPREFIX/dosdevices"
    try_remove "$WINEPREFIX/drive_c/users"
    try_remove "$WINEPREFIX/drive_c/ProgramData/Package Cache"
    try_remove "${START_WINE_PATH}/data/tmp/pfx_default.iso"
    mksquashfs "${START_WINE_PATH}/data/pfx/pfx_default" "${START_WINE_PATH}/data/tmp/pfx_default.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
    "$CRIER" -i "$(eval_gettext "Backup completed successfully")"

}

#################################   DEBUG   ####################################

DEBUG_LOG () {

    echo "--------------------------------------------------------------------------------"
    echo "Application name ${SW_GAME_NAME}"
    echo "--------------------------------------------------------------------------------"
    echo "Date and time"
    date
    echo "--------------------------------------------------------------------------------"
    echo "Operating system"
    lsb_release -d | sed s/Description/ОС/g
    echo "--------------------------------------------------------------------------------"
    echo "Desktop Environment"
    echo "$DESKTOP_SESSION"
    echo "${XDG_CURRENT_DESKTOP}"
    echo "--------------------------------------------------------------------------------"
    echo "Kernel"
    uname -rmo
    echo "--------------------------------------------------------------------------------"
    echo "CPU"
    cat /proc/cpuinfo | grep "model name"
    echo "--------------------------------------------------------------------------------"
    echo "RAM"
    free -m
    echo "--------------------------------------------------------------------------------"
    echo "Graphic cards"
    lspci | grep VGA
    glxinfo | grep OpenGL
    echo "--------------------------------------------------------------------------------"
    echo "Version WINE"
    "$WINELOADER" --version 2>&1
    echo "--------------------------------------------------------------------------------"

}

DEBUG_VULKAN () {

    DEBUG_LOG > "${START_WINE_PATH}/data/tmp/logs/${SW_GAME_NAME}.log"

    RUN_VULKAN >> "${START_WINE_PATH}/data/tmp/logs/${SW_GAME_NAME}.log" 2>&1 "$@"

}

##############################   DOWNLOAD WINE   ###############################

WINE_1 () {

    [ -f "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64.tar.xz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64.tar.xz" &&
    [ -d "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64"

    if [ ! -d "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64/bin" ]; then

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/wine-staging/wine-${STAG_VER}-staging-amd64.tar.xz?download=true"
            "https://github.com/Kron4ek/Wine-Builds/releases/download/${STAG_VER}/wine-${STAG_VER}-staging-amd64.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64.tar.xz" "${START_WINE_PATH}/data/tmp"
        try_create_dir "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64"

        for copy_dir in bin lib share ; do
            try_move "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64"
        done

        [ -f "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64.tar.xz" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64.tar.xz" &&
        [ -d "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-amd64"

    fi

    echo "wine-staging ${STAG_VER}" > "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64/version"
    echo "${STAG_VER}" >> "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64/version"

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64/bin" ]; then
            msg="$(eval_gettext "Downloading wine staging \${STAG_VER} completed successfully")"
            "$CRIER" -i "$msg"
        else
            "$CRIER" -e "$(eval_gettext "Download failed, try again")"
        fi
    fi

}

WINE_2 () {

    [ -f "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}.tar.xz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}.tar.xz" &&
    [ -d "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}"

    if [ ! -d "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}/bin" ]; then

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/wine-steam-proton/steam-proton-${SP_VER}.tar.xz?download=true"
            "https://github.com/RusNor/Wine-Steam-Proton/releases/download/steam-proton-${SP_VER}/steam-proton-${SP_VER}.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}.tar.xz" "${START_WINE_PATH}/data/tmp"
        try_create_dir "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}/files"

        for copy_dir in bin lib lib64 share ; do
            try_move "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}/${copy_dir}" "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}/files"
        done

        for link_dir in bin lib lib64 share ; do
            try_link "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}/files/${link_dir}" "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}"
        done

        echo "steam-${SP_VER}" > "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}/version"
        echo "${SP_VER}" >> "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}/version"

        [ -f "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}.tar.xz" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}.tar.xz" &&
        [ -d "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/steam-proton-${SP_VER}"

    fi

    chmod -R 775 "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}/bin" ]; then
            msg="$(eval_gettext "Downloading wine steam proton \${SP_VER} completed successfully")"
            "$CRIER" -i "$msg"
        else
            "$CRIER" -e "$(eval_gettext "Download failed, try again")"
        fi
    fi

}

WINE_3 () {

    [ -f "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}.tar.gz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}.tar.gz" &&
    [ -d "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}"

    if [ ! -d "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}/bin" ]; then

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/proton-ge-custom/GE-Proton${GE_VER}.tar.gz?download=true"
            "https://github.com/GloriousEggroll/proton-ge-custom/releases/download/GE-Proton${GE_VER}/GE-Proton${GE_VER}.tar.gz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}.tar.gz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}.tar.gz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}.tar.gz" "${START_WINE_PATH}/data/tmp"
        try_create_dir "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        try_move "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}/files" "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"

        for link_dir in bin lib lib64 share ; do
            try_link "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}/files/${link_dir}" "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        done

        echo "GE-${GE_VER}" > "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}/version"
        echo "${GE_VER}" >> "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}/version"

        [ -f "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}.tar.gz" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}.tar.gz" &&
        [ -d "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/GE-Proton${GE_VER}"

    fi

    chmod -R 775 "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"

    [ -f "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}/bin/cabextract" ] && \
        try_remove "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}/bin/cabextract"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}/bin" ]; then
            msg="$(eval_gettext "Downloading wine proton ge \${GE_VER} completed successfully")"
            "$CRIER" -i "$msg"
        else
            "$CRIER" -e "$(eval_gettext "Download failed, try again")"
        fi
    fi

}

WINE_4 () {

    [ -f "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64.tar.xz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64.tar.xz" &&
    [ -d "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64"

    if [ ! -d "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64/bin" ]; then

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/wine-staging-tkg/wine-${STAG_VER}-staging-tkg-amd64.tar.xz?download=true"
            "https://github.com/Kron4ek/Wine-Builds/releases/download/${STAG_VER}/wine-${STAG_VER}-staging-tkg-amd64.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64.tar.xz" "${START_WINE_PATH}/data/tmp"
        try_create_dir "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64"

        for copy_dir in bin lib share ; do
            try_move "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64"
        done

        [ -f "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64.tar.xz" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64.tar.xz" &&
        [ -d "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/wine-${STAG_VER}-staging-tkg-amd64"

    fi

    echo "wine-staging-tkg ${STAG_VER}" > "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64/version"
    echo "${STAG_VER}" >> "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64/version"

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64/bin" ]; then
            msg="$(eval_gettext "Downloading wine staging tkg \${STAG_VER} completed successfully")"
            "$CRIER" -i "$msg"
        else
            "$CRIER" -e "$(eval_gettext "Download failed, try again")"
        fi
    fi

}

WINE_5 () {

    [ -f "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" &&
    [ -d "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64" ] && \
        try_remove "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"

    if [ ! -d "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/bin" ]; then

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/wine-ge-custom/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz?download=true"
            "https://github.com/GloriousEggroll/wine-ge-custom/releases/download/GE-Proton${LUTRIS_GE_VER}/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" "${START_WINE_PATH}/data/tmp"
        try_create_dir "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/files"

        for copy_dir in bin lib lib64 share ; do
            try_move "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/files"
        done

        for link_dir in bin lib lib64 share ; do
            try_link "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/files/${link_dir}" "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"
        done

        [ -f "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" &&
        [ -d "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"

    fi

    echo "Lutris-GE-${LUTRIS_GE_VER}" > "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/version"
    echo "${LUTRIS_GE_VER}" >> "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/version"

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/bin" ]; then
            msg="$(eval_gettext "Downloading wine lutris ge \${LUTRIS_GE_VER} completed successfully")"
            "$CRIER" -i "$msg"
        else
            "$CRIER" -e "$(eval_gettext "Download failed, try again")"
        fi
    fi

}

RM_WINE_1 () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to remove the wine staging?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64"
    fi

}

RM_WINE_2 () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to remove the wine steam proton?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove "${START_WINE_PATH}/data/wine/steam-proton-${SP_VER}"
    fi

}

RM_WINE_3 () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to remove the wine proton ge?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove "${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
    fi

}

RM_WINE_4 () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to remove the wine staging tkg?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove "${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-tkg-amd64"
    fi

}

RM_WINE_5 () {

    crier=`"$CRIER" -q "$(eval_gettext "Do you really want to remove the wine lutris ge?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"
    fi

}

##################################   STOP   ####################################

STOP () {

    RED='\033[1;31m'

    winedevice_pids="$(pgrep 'winedevice')"
    wine_pids="$(ls -l /proc/*/exe 2>/dev/null | grep -E 'wine(64)?-preloader|wineserver' | awk -F/ '{print $3}')"

    for wine_pid in $winedevice_pids $wine_pids ; do
        if [ ! -z "${wine_pid}" ]; then
            kill -n 9 ${wine_pid}
            echo -e "$RED $wine_pid"
        fi
    done

    notify-send -t 1500 -a "StartWine" "$(eval_gettext "Termination of active processes...")"

    exit

}

#############################   AUTOINSTALL APP   ##############################

INSTALL_BATTLE_NET () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Battle.net/drive_c/Program Files (x86)/Battle.net/Battle.net.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Battle.net"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/Battle.net_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Battle.net_0.1/Battle.net_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/Battle.net_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/Battle.net_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Battle.net_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"
        try_remove "${START_WINE_PATH}/data/tmp/Battle.net_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Battle.net/Battle.net.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Battle_Net.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Battle_Net.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_EPIC_GAMES () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_EpicGamesLauncher/drive_c/Program Files (x86)/Epic Games/Launcher/Portal/Binaries/Win32/EpicGamesLauncher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_EpicGamesLauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/EpicGames_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/EpicGames_0.1/EpicGames_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/EpicGames_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/EpicGames_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/EpicGames_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"
        try_remove "${START_WINE_PATH}/data/tmp/EpicGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Epic Games/Launcher/Portal/Binaries/Win32/EpicGamesLauncher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Epic_Games.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Epic_Games.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_EVE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_evelauncher/drive_c/EVE/Launcher/evelauncher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_evelauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/EveLauncher_patch.reg"

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/EVE_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/EVE_0.1/EVE_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/EVE_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/EVE_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/EVE_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/EVE_0.1.tar.xz"

        SW_USE_EXE="drive_c/EVE/Launcher/evelauncher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Eve.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Eve.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_GAME_CENTER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_GameCenter/drive_c/users/steamuser/AppData/Local/GameCenter/GameCenter.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export FTP_URL=" https://static.gc.vkplay.ru/VKPlayLoader.exe"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/VKPlayLoader.exe"

        export SW_USE_PFX="pfx_GameCenter"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/VKPlayLoader.exe" /silent "$@"

        while pgrep -fa 'VKPlayLoader' &>/dev/null ; do sleep 1 ; done
        "${WINESERVER}" -k

        try_remove "${START_WINE_PATH}/data/tmp/VKPlayLoader.exe"

        SW_USE_EXE="drive_c/users/steamuser/AppData/Local/GameCenter/GameCenter.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Game_Center.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Game_Center.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_GALAXY () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_GalaxyClient/drive_c/Program Files (x86)/GOG Galaxy/GalaxyClient.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export GOG_VER=2.0.73.27
        export FTP_URL="https://content-system.gog.com/open_link/download?path=/open/galaxy/client/${GOG_VER}/setup_galaxy_${GOG_VER}.exe"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/setup_galaxy_${GOG_VER}.exe"

        export SW_USE_PFX="pfx_GalaxyClient"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/setup_galaxy_${GOG_VER}.exe" /VERYSILENT /NORESTART "$@"

        while pgrep -fa 'setup_galaxy_${GOG_VER}' &>/dev/null ; do sleep 1 ; done

        SW_USE_EXE="drive_c/Program Files (x86)/GOG Galaxy/GalaxyClient.exe"

        try_remove "${START_WINE_PATH}/data/tmp/setup_galaxy_${GOG_VER}.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Galaxy.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Galaxy.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_RIOT_GAMES () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_RiotClientServices/drive_c/Riot Games/Riot Client/RiotClientServices.exe" ]; then

        LUTRIS_GE_VER="8-27-LoL"

        [ -f "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz"
        [ -d "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64" ] && \
            try_remove "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"

        if [ ! -d "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/bin" ]; then
            export FTP_URL="https://github.com/GloriousEggroll/wine-ge-custom/releases/download/GE-Proton${LUTRIS_GE_VER}/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz"
            "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz"
            "$CRIER" -tar "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" "${START_WINE_PATH}/data/tmp"
            try_create_dir "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"

            for copy_dir in bin lib lib64 share ; do
                try_move "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"
            done

            [ -f "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz" ] && \
                try_remove "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64.tar.xz"
            [ -d "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64" ] && \
                try_remove "${START_WINE_PATH}/data/tmp/lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"

        fi

        chmod -R 775 "${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"

        export SW_USE_PFX="pfx_RiotClientServices"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine-lutris-GE-Proton${LUTRIS_GE_VER}-x86_64"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/RiotGames_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/RiotGames_0.1/RiotGames_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/RiotGames_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/RiotGames_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/RiotGames_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/RiotGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Riot Games/Riot Client/RiotClientServices.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Riot_Games.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Riot_Games.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_EA () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_EALauncher/drive_c/Program Files/Electronic Arts/EA Desktop/EA Desktop/EALauncher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export FTP_URL="https://origin-a.akamaihd.net/EA-Desktop-Client-Download/installer-releases/EAappInstaller.exe"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/EAappInstaller.exe"

        export SW_USE_PFX="pfx_EALauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/EAappInstaller.exe" /silent "$@"

        while pgrep -fa 'EAappInstaller' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        try_remove "${START_WINE_PATH}/data/tmp/EAappInstaller.exe"

        SW_USE_EXE="drive_c/Program Files/Electronic Arts/EA Desktop/EA Desktop/EALauncher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/EA.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/EA.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_ROCKSTAR_GAMES () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Launcher/drive_c/Program Files/Rockstar Games/Launcher/Launcher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/RockstarGames_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/RockstarGames_0.1/RockstarGames_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/RockstarGames_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/RockstarGames_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/RockstarGames_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files"
        try_remove "${START_WINE_PATH}/data/tmp/RockstarGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files/Rockstar Games/Launcher/Launcher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Rockstar_Games.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Rockstar_Games.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_STEAM () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_steam/drive_c/Program Files (x86)/Steam/steam.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_steam"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

       "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/Steam_patch.reg"

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/Steam_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Steam_0.1/Steam_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/Steam_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/Steam_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Steam_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"
        try_remove "${START_WINE_PATH}/data/tmp/Steam_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Steam/steam.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Steam.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Steam.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_UBISOFT_CONNECT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_UbisoftConnect/drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/UbisoftConnect.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_UbisoftConnect"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/Ubisoft_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Ubisoft_0.1/Ubisoft_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/Ubisoft_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/Ubisoft_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Ubisoft_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"
        try_remove "${START_WINE_PATH}/data/tmp/Ubisoft_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/UbisoftConnect.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Ubisoft_Connect.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Ubisoft_Connect.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_WARGAMING () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_wgc_api/drive_c/ProgramData/Wargaming.net/GameCenter/api/wgc_api.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_wgc_api"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/Wargaming.net_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Wargaming.net_0.1/Wargaming.net_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/Wargaming.net_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/Wargaming.net_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Wargaming.net_0.1.tar.xz" "${WINEPREFIX}/drive_c/ProgramData"
        try_remove "${START_WINE_PATH}/data/tmp/Wargaming.net_0.1.tar.xz"

        SW_USE_EXE="drive_c/ProgramData/Wargaming.net/GameCenter/api/wgc_api.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Wargaming.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Wargaming.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_ZONA () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Zona/drive_c/Program Files (x86)/Zona/Zona.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export FTP_URL="https://dlf1.appzona.org/ZonaSetup[mpj07].exe"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/ZonaSetup.exe"

        export SW_USE_PFX="pfx_Zona"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/ZonaSetup.exe" /silent "$@"

        while pgrep -fa 'ZonaSetup' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        SW_USE_EXE="drive_c/Program Files (x86)/Zona/Zona.exe"

        try_remove "${START_WINE_PATH}/data/tmp/ZonaSetup.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Zona.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Zona.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_OSU () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/osu!/osu!.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_osu!"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/Osu_patch.reg"

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/osu_0.1/osu_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/osu_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/osu_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/osu_0.1.tar.xz"

        SW_USE_EXE="drive_c/osu!/osu!.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Osu.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Osu.jpg"

        sw_shortcuts_autoinstall

        if [ ! -d "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy" ]; then
            export FTP_URL="https://github.com/openglfreak/winestreamproxy/releases/download/v2.0.3/winestreamproxy-2.0.3-amd64.tar.gz"
            "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/winestreamproxy-2.0.3-amd64.tar.gz"
            try_create_dir "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"
            try_create_dir "${START_WINE_PATH}/data/tmp/winestreamproxy"
            "$CRIER" -tar "${START_WINE_PATH}/data/tmp/winestreamproxy-2.0.3-amd64.tar.gz" "${START_WINE_PATH}/data/tmp/winestreamproxy"

            try_copy "${START_WINE_PATH}/data/tmp/winestreamproxy/settings.conf" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"
            try_copy "${START_WINE_PATH}/data/tmp/winestreamproxy/winestreamproxy.exe" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"
            try_copy "${START_WINE_PATH}/data/tmp/winestreamproxy/winestreamproxy_unixlib.dll.so" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"

            try_remove "${START_WINE_PATH}/data/tmp/winestreamproxy-2.0.3-amd64.tar.gz" &&
            try_remove "${START_WINE_PATH}/data/tmp/winestreamproxy"

            export FTP_URL="https://github.com/openglfreak/osu-handler-wine/releases/download/v0.3.0/osu-handler-wine"
            "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy/osu-handler-wine"
            echo "done"
        fi

        chmod -R 775 "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"

        if [ ! -f "/home/${USER}/.local/share/applications/Add-Osu-Plugin.desktop" ]; then
            Add_Osu_Plugin="Add-Osu-Plugin.desktop"
            echo "[Desktop Entry]" > "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Name=Add-Osu-Plugin" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Exec=env \"${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy/osu-handler-wine\" %F" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Comment=Osu Plugins" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Type=Application" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "MimeType=osz;osk;" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Categories=Game" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "NoDisplay=true" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Icon=${START_WINE_PATH}/data/img/osu!_x256.png" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            chmod +x "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
        fi

        export DLL="dotnet40"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_WORLD_OF_SEA_BATTLE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_WorldOfSeaBattleClient/drive_c/World Of Sea Battle/WorldOfSeaBattleClient.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_WorldOfSeaBattleClient"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/WorldOfSeaBattle_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/WorldOfSeaBattle_0.1/WorldOfSeaBattle_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/WorldOfSeaBattle_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/WorldOfSeaBattle_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/WorldOfSeaBattle_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/WorldOfSeaBattle_0.1.tar.xz"

        SW_USE_EXE="drive_c/World Of Sea Battle/WorldOfSeaBattleClient.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/World_of_Sea_Battle.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/World_of_Sea_Battle.jpg"
        convert -resize 480X480 "${WINEPREFIX}/drive_c/World Of Sea Battle/WorldOfSeaBattleClient.exe.png" \
        "${START_WINE_PATH}/data/img/WorldOfSeaBattleClient_x256.png"

        sw_shortcuts_autoinstall

        export DLL="xna40"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_CROSSOUT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_CrossOut/drive_c/Crossout/CrossOut.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_CrossOut"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Crossout_0.1/Crossout_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Crossout_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Crossout_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/Crossout_0.1.tar.xz"

        SW_USE_EXE="drive_c/Crossout/CrossOut.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Crossout.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Crossout.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_CALIBER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Caliber/drive_c/Program Files (x86)/1C Game Studios/Caliber/Caliber.exe" ]; then

        STAG_VER="9.1"
        WINE_OK=1
        WINE_1

        export SW_USE_PFX="pfx_Caliber"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine-${STAG_VER}-staging-amd64"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/Caliber_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Caliber_0.1/Caliber_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/Caliber_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/Caliber_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Caliber_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"
        try_remove "${START_WINE_PATH}/data/tmp/Caliber_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/1C Game Studios/Caliber/Caliber.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Caliber.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Caliber.jpg"

        sw_shortcuts_autoinstall

        export DLL="vcrun2019"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_LESTA_GAMES () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_lgc_api/drive_c/ProgramData/Lesta/GameCenter/api/lgc_api.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_lgc_api"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/Lesta_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Lesta_0.1/Lesta_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Lesta_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Lesta_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Lesta_0.1.tar.xz" "${WINEPREFIX}/drive_c/ProgramData"
        try_remove "${START_WINE_PATH}/data/tmp/Lesta_0.1.tar.xz"

        SW_USE_EXE="drive_c/ProgramData/Lesta/GameCenter/api/lgc_api.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Lesta_Games.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Lesta_Games.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_STALCRAFT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_ExboLauncher/drive_c/EXBO/java/bin/ExboLauncher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_ExboLauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Stalcraft_0.1/Stalcraft_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Stalcraft_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Stalcraft_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/Stalcraft_0.1.tar.xz"

        SW_USE_EXE="drive_c/EXBO/java/bin/ExboLauncher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Stalcraft.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Stalcraft.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_LINEAGE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Lineage/drive_c/GameCoast Games/launcher/Lineage.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Lineage"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Lineage_0.1/Lineage_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Lineage_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/Lineage_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/Lineage_0.1.tar.xz"

        SW_USE_EXE="drive_c/GameCoast Games/launcher/Lineage.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Lineage.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Lineage.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_PLARIUM_PLAY () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_RaidSetup/drive_c/RaidSetup.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_RaidSetup"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/PlariumPlay/PlariumPlay.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/PlariumPlay.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/PlariumPlay.tar.xz" "${WINEPREFIX}/drive_c"

        try_remove "${START_WINE_PATH}/data/tmp/PlariumPlay.tar.xz"

        SW_USE_EXE="drive_c/RaidSetup.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Plarium_Play.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Plarium_Play.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_PATH_OF_EXILE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_PathOfExile/drive_c/Grinding Gear Games/Path of Exile/PathOfExile.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_PathOfExile"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/GrindingGearGames_0.1/GrindingGearGames_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GrindingGearGames_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/GrindingGearGames_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/GrindingGearGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Grinding Gear Games/Path of Exile/PathOfExile.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Path_of_Exile.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Path_of_Exile.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_STALKER_ONLINE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_StalkerOnline_Launcher/drive_c/StalkerOnline/StalkerOnline Launcher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_StalkerOnline_Launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/StalkerOnline_0.1/StalkerOnline_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/StalkerOnline_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/StalkerOnline_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/StalkerOnline_0.1.tar.xz"

        SW_USE_EXE="drive_c/StalkerOnline/StalkerOnline Launcher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Stalker_Online.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Stalker_Online.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_ANOMALY_ZONE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Anomaly_Zone/drive_c/Cybertime Games/Anomaly-Zone/Anomaly Zone.exe" ]; then

        SP_VER="8.0.1"
        WINE_OK=1
        WINE_2

        export SW_USE_PFX="pfx_Anomaly_Zone"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/CybertimeGames_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/CybertimeGames_0.1/CybertimeGames_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/CybertimeGames_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/CybertimeGames_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/CybertimeGames_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/CybertimeGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Cybertime Games/Anomaly-Zone/Anomaly Zone.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Anomaly_Zone.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Anomaly_Zone.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_NINTENDO_SWITCH () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_yuzu/drive_c/yuzu/yuzu.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_yuzu"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/yuzu_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/yuzu_0.1/yuzu_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/yuzu_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/yuzu_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/yuzu_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/yuzu_0.1.tar.xz"

        SW_USE_EXE="drive_c/yuzu/yuzu.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Nintendo_Switch.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Nintendo_Switch.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi


}

INSTALL_POPCOTIME () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_PopcoTime/drive_c/PopcoTime/PopcoTime.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_PopcoTime"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/PopcoTime_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/PopcoTime_0.1/PopcoTime_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/PopcoTime_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/PopcoTime_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/PopcoTime_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/PopcoTime_0.1.tar.xz"

        SW_USE_EXE="drive_c/PopcoTime/PopcoTime.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Popcotime.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Popcotime.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_GAMEXP () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_GameXP_Launcher/drive_c/Launcher/GameXP Launcher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_GameXP_Launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/GameXPLauncher_0.1/GameXPLauncher_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GameXPLauncher_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/GameXPLauncher_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/GameXPLauncher_0.1.tar.xz"

        SW_USE_EXE="drive_c/Launcher/GameXP Launcher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/GameXP.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/GameXP.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_RPG_CLUB () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_RPG_Club/drive_c/RPG-Club/RPG Club.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_RPG_Club"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/RPG-Club_0.1/RPG-Club_0.1.tar.xz"
        "$CRIER" -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/RPG-Club_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/RPG-Club_0.1.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/RPG-Club_0.1.tar.xz"

        SW_USE_EXE="drive_c/RPG-Club/RPG Club.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/RPG_Club.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/RPG_Club.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_GENSHIN_IMPACT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_launcher/drive_c/Program Files/Genshin Impact/launcher.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/GenshinImpact_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/GenshinImpact_0.1/GenshinImpact_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/GenshinImpact_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/GenshinImpact_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/GenshinImpact_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files"
        try_remove "${START_WINE_PATH}/data/tmp/GenshinImpact_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files/Genshin Impact/launcher.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Genshin_Impact.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Genshin_Impact.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

INSTALL_LOST_LIGHT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Lost_Light/drive_c/Program Files (x86)/LostLight/Lost Light.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Lost_Light"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            "https://huggingface.co/SudoNano/sw_repo/resolve/main/Autoinstal-Launchers-Data/LostLight_0.1.tar.xz?download=true"
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/LostLight_0.1/LostLight_0.1.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/LostLight_0.1.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/LostLight_0.1.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/LostLight_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"
        try_remove "${START_WINE_PATH}/data/tmp/LostLight_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/LostLight/Lost Light.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/Lost_Light.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/Lost_Light.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}


INSTALL_RETROBAT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_retrobat/drive_c/RetroBat/retrobat.exe" ]; then

        GE_VER="8-30"
        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_retrobat"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/GE-Proton${GE_VER}"
        export WINELOADER=$WINEDIR/bin/wine

        try_remove "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

        "${WINELOADER}" wineboot || prefix_init_error
        "${WINESERVER}" -w

        export FTP_URL=(
            ""
            "https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/RetroBat/RetroBat.tar.xz"
        )

        "$CRIER" -d "${FTP_URL[0]}" "${START_WINE_PATH}/data/tmp/RetroBat.tar.xz" \
        || "$CRIER" -d "${FTP_URL[1]}" "${START_WINE_PATH}/data/tmp/RetroBat.tar.xz"
        "$CRIER" -tar "${START_WINE_PATH}/data/tmp/RetroBat.tar.xz" "${WINEPREFIX}/drive_c"
        try_remove "${START_WINE_PATH}/data/tmp/RetroBat.tar.xz"

        SW_USE_EXE="drive_c/RetroBat/retrobat.exe"

        export COPY_ICON_H="${START_WINE_PATH}/data/img/launcher_icons/horizontal/RetroBat.jpg"
        export COPY_ICON_V="${START_WINE_PATH}/data/img/launcher_icons/vertical/RetroBat.jpg"

        sw_shortcuts_autoinstall

        "$CRIER" -i "$(eval_gettext "Application installed successfully")"

    else

        "$CRIER" -i "$(eval_gettext "Application is installed")"

    fi

}

#################################   THE END   ##################################
