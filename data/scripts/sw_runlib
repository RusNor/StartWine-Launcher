#!/usr/bin/env bash

cd "$(dirname "`readlink -f "$0"`")"
export link="$(pwd)"
cd "${link}/../../"
export START_WINE_PATH="$(pwd)"

export SW_DEVELOPERS="Rus_Nor Nixon VHSgunzo"

###############################   TOOLS   ######################################

export SW_VER="379"
export GE_VER="8-11"
export SP_VER="8.0.3"
export STAG_VER="8.13"
export LUTRIS_VER="7.2-2"
export LUTRIS_GE_VER="8-13"
export UTILS_VER="v2.3"
export CRIER="${START_WINE_PATH}/data/scripts/sw_crier.py"

##############################...LOCALE...######################################

. gettext.sh
export TEXTDOMAIN="StartWine"
export TEXTDOMAINDIR="${START_WINE_PATH}/data/scripts/locale"

##############################   FUNCTIONS TOOLS   #############################

print_error () {

    echo "ERROR: $@"

}

print_info () {

    echo "INFO: $@"

}

try_copy_file () {

    if [ ! -f "$1" ]; then
        print_info "file $1 not found for copy" && return 1
    elif [ -z "$2" ]; then
        print_error "no way to copy file $1" && return 1
    else
        cp -f "$1" "$2"
        if [ "$?" != 0 ]; then
            print_error "failed to copy file $1 to $2" || return 1
        else
            print_info "copy file $1 to $2 was successful" || return 0
        fi
    fi

}

try_copy_dir () {

    if [ ! -d "$1" ]; then
        print_info "directory $1 not found for copy"
    elif [ -z "$2" ]; then
        print_error "no way to copy directory $1"
    else
        cp -fr "$1" "$2"
        [ "$?" != 0 ] && print_error "failed to copy directory $1 to $2" || return 0
    fi
    return 1

}

try_force_link_file () {

    if [ ! -f "$1" ]; then
        print_info "file $1 not found for link"
    elif [ -z "$2" ]; then
        print_error "no way to link file $1"
    else
        ln -sf "$1" "$2"
        [ "$?" != 0 ] && print_error "failed to link file $1 to $2" || return 0
    fi
    return 1

}

try_force_link_dir () {

    if [ ! -d "$1" ]; then
        print_info "directory $1 not found for link"
    elif [ -z "$2" ]; then
        print_error "no way to link directory $1"
    else
        ln -sf "$1" "$2"
        [ "$?" != 0 ] && print_error "failed to link directory $1 to $2" || return 0
    fi
    return 1

}

create_new_dir () {

    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi

}

try_remove_file () {

    if [[ -f "$1" || -L "$1" ]]; then
        rm -fr "$@"
        [ "$?" != 0 ] && print_error "failed to remove file $1" || return 0
    fi
    return 1

}

try_remove_dir () {

    if [[ -d "$1" || -L "$1" ]]; then
        rm -fr "$@"
        [ "$?" != 0 ] && print_error "failed to remove directory $1" || return 0
    fi
    return 1

}

try_remove_steam_lib () {

    rm -fr "${WINEDIR}"*/lib*/*steam*
    rm -fr "${WINEDIR}"*/lib*/wine/*steam*
    rm -fr "${WINEDIR}"*/lib*/wine/*/*steam*
    rm -fr "${WINEDIR}/bin/cabextract"

}

try_winedlloverride_update () {

    if [ ! -z "${WINEDLLOVERRIDES}" ]; then
        export WINEDLLOVERRIDES="${1};${WINEDLLOVERRIDES}"
    else
        export WINEDLLOVERRIDES="${1}"
    fi

}

try_ld_library_path_update () {

    if [ ! -z "${LD_LIBRARY_PATH}" ]; then
        export LD_LIBRARY_PATH="${1}:${LD_LIBRARY_PATH}"
    else
        export LD_LIBRARY_PATH="${1}"
    fi

}

try_winedllpath_update () {

    if [ ! -z "${WINEDLLPATH}" ]; then
        export WINEDLLPATH="${1}:${WINEDLLPATH}"
    else
        export WINEDLLPATH="${1}"
    fi

}

try_path_update () {

    if [ ! -z "${PATH}" ]; then
        export PATH="${1}:${PATH}"
    else
        export PATH="${1}"
    fi

}

try_clear_pfx () {

    rm -rf "$WINEPREFIX/registry_"*
    rm -rf "$WINEPREFIX/"*.reg
    rm -rf "$WINEPREFIX/"*.log
    rm -rf "$WINEPREFIX/.update-timestamp"
    rm -rf "$WINEPREFIX/drive_c/.windows-serial"
    rm -rf "$WINEPREFIX/drive_c/windows/"
    rm -rf "$WINEPREFIX/drive_c/ProgramData/Setup"
    rm -rf "$WINEPREFIX/drive_c/ProgramData/Windows"
    rm -rf "$WINEPREFIX/drive_c/ProgramData/WindowsTask"
    rm -rf "$WINEPREFIX/drive_c/ProgramData/Package Cache"
    rm -rf "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Microsoft"
    rm -rf "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Temp"
    rm -rf "$WINEPREFIX/drive_c/users/Public/Local Settings/Temporary Internet Files"
    rm -rf "$WINEPREFIX/drive_c/users/Public/Application Data/Microsoft"
    rm -rf "$WINEPREFIX/drive_c/users/Public/Application Data/wine_gecko"
    rm -rf "$WINEPREFIX/drive_c/users/Public/Temp"
    rm -rf "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Microsoft"
    rm -rf "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Temp"
    rm -rf "$WINEPREFIX/drive_c/users/user/Local Settings/Temporary Internet Files"
    rm -rf "$WINEPREFIX/drive_c/users/user/Application Data/Microsoft"
    rm -rf "$WINEPREFIX/drive_c/users/user/Application Data/wine_gecko"
    rm -rf "$WINEPREFIX/drive_c/users/user/Temp"
    rm -rf "$WINEPREFIX/drive_c/Program Files/Internet Explorer"
    rm -rf "$WINEPREFIX/drive_c/Program Files/Windows Media Player"
    rm -rf "$WINEPREFIX/drive_c/Program Files/Windows NT"
    rm -rf "$WINEPREFIX/drive_c/Program Files/Common Files"
    rm -rf "$WINEPREFIX/drive_c/Program Files (x86)/Internet Explorer"
    rm -rf "$WINEPREFIX/drive_c/Program Files (x86)/Common Files"
    rm -rf "$WINEPREFIX/drive_c/Program Files (x86)/Windows Media Player"
    rm -rf "$WINEPREFIX/drive_c/Program Files (x86)/Windows NT"
    rm -rf "${START_WINE_PATH}/data/tmp/gl_shader_cache/"*
    rm -rf "${START_WINE_PATH}/data/tmp/log/"*
    rm -rf "${START_WINE_PATH}/data/tmp/"*.log
    rm -rf "${START_WINE_PATH}/data/tmp/dxvk_cache/"*
    rm -rf "${START_WINE_PATH}/data/tmp/gstreamer-1.0/"*
    rm -rf "$HOME/.cache/gstreamer-1.0/"*
    rm -rf "${START_WINE_PATH}/data/tmp/mesa_shader_cache/"*

}

prefix_init_error () {

    clear
    echo "There is a problem initializing the Wine prefix !"
    try_clear_pfx
    crier=`$CRIER -e "$(eval_gettext "Error initializing the Wine prefix")"`
    exit 1

}

libraries_init_error () {

    clear
    echo "Error installing libraries, try again !"
    try_clear_pfx
    crier=`$CRIER -e "$(eval_gettext "Error installing libraries, try again")"`
    exit 1

}

sw_win_ver () {

    if [[ -z `cat "${WINEPREFIX}/system.reg" | grep "Windows $SW_USE_WINDOWS_VER"` ]]; then
        if [ ! -z "${SW_USE_WINDOWS_VER}" ] && [ `echo "$SW_USE_WINDOWS_VER" | sed 's/.*/\L&/'` == "xp" ]; then
            if [ "${WINEARCH}" != "win32" ]; then
                export SW_USE_WINDOWS_VER="xp64"
            else
                export SW_USE_WINDOWS_VER="xp"
            fi
        fi
        "${WINELOADER}" winecfg -v `echo "win${SW_USE_WINDOWS_VER}" | sed 's/.*/\L&/'`
        echo "Set to win-${SW_USE_WINDOWS_VER}"
    fi

}

try_fix_pfx () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c/windows/system32/start.exe" ]; then
        "${WINELOADER}" wineboot -i || prefix_init_error
        "${WINESERVER}" -w
    fi

    if [ "${SW_USE_DISABLE_UPDATE_PFX}" == 1 ]; then
        if [ "$(cat ${WINEPREFIX}/.update-timestamp)" != "disable" ]; then
            echo disable > "${WINEPREFIX}/.update-timestamp"
        fi
    else
        if [ "$(cat ${WINEPREFIX}/.update-timestamp)" == "disable" ]; then
            try_remove_file "${WINEPREFIX}/.update-timestamp"
        fi
    fi

    if [ -d "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/share/default_pfx/drive_c/openxr" ]; then
        try_copy_dir "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/share/default_pfx/drive_c/openxr" "${WINEPREFIX}/drive_c"
    fi

    if [ -f "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/i386-windows/vrclient.dll" ]; then
        if [ ! -f "${WINEPREFIX}/drive_c/vrclient/bin/vrclient.dll" ]; then
            create_new_dir "${WINEPREFIX}/drive_c/vrclient/bin"
            try_copy_file "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib64/wine/x86_64-windows/vrclient_x64.dll" "${WINEPREFIX}/drive_c/vrclient/bin"
            try_copy_file "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/lib/wine/i386-windows/vrclient.dll" "${WINEPREFIX}/drive_c/vrclient/bin"
        fi
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/${USER}" ]; then
        try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser" "${WINEPREFIX}/drive_c/users/${USER}"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/${USER}" ]; then
        try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser" "${WINEPREFIX}/drive_c/users/${USER}"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/Application Data" ]; then
        try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser/AppData/Roaming" "${WINEPREFIX}/drive_c/users/steamuser/Application Data"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/My Documents" ]; then
        try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents" "${WINEPREFIX}/drive_c/users/steamuser/My Documents"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/Games" ]; then
        try_force_link_dir "${START_WINE_PATH}/Games" "${WINEPREFIX}/drive_c/Games"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/Public/Documents/Steam" ]; then
        create_new_dir "${WINEPREFIX}/drive_c/users/Public/Documents/Steam"
    fi

    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/Documents/Steam" ]; then
        create_new_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents/Steam"
    fi

    if [ ! -f "${WINEPREFIX}/drive_c/windows/Fonts/"arial.ttf ]; then
        create_new_dir "${WINEPREFIX}/drive_c/windows/Fonts"
        export SW_FONTS="${WINEDIR}/share/fonts"
        export SW_WINE_FONTS="${WINEDIR}/share/wine/fonts"
        export SW_PFX_FONTS="${WINEPREFIX}/drive_c/windows/Fonts"
        try_copy_file "${SW_FONTS}/"arial.ttf "${SW_PFX_FONTS}/"arial.ttf || try_copy_file "${SW_WINE_FONTS}/"arial.ttf "${SW_PFX_FONTS}/"arial.ttf
        try_copy_file "${SW_FONTS}/"arialbd.ttf "${SW_PFX_FONTS}/"arialbd.ttf || try_copy_file "${SW_WINE_FONTS}/"arialbd.ttf "${SW_PFX_FONTS}/"arialbd.ttf
        try_copy_file "${SW_FONTS}/"cour.ttf "${SW_PFX_FONTS}/"cour.ttf || try_copy_file "${SW_WINE_FONTS}/"cour.ttf "${SW_PFX_FONTS}/"cour.ttf
        try_copy_file "${SW_FONTS}/"courbd.ttf "${SW_PFX_FONTS}/"courbd.ttf || try_copy_file "${SW_WINE_FONTS}/"courbd.ttf "${SW_PFX_FONTS}/"courbd.ttf
        try_copy_file "${SW_FONTS}/"georgia.ttf "${SW_PFX_FONTS}/"georgia.ttf || try_copy_file "${SW_WINE_FONTS}/"georgia.ttf "${SW_PFX_FONTS}/"georgia.ttf
        try_copy_file "${SW_FONTS}/"malgun.ttf "${SW_PFX_FONTS}/"malgun.ttf || try_copy_file "${SW_WINE_FONTS}/"malgun.ttf "${SW_PFX_FONTS}/"malgun.ttf
        try_copy_file "${SW_FONTS}/"micross.ttf "${SW_PFX_FONTS}/"micross.ttf || try_copy_file "${SW_WINE_FONTS}/"micross.ttf "${SW_PFX_FONTS}/"micross.ttf
        try_copy_file "${SW_FONTS}/"msgothic.ttc "${SW_PFX_FONTS}/"msgothic.ttc || try_copy_file "${SW_WINE_FONTS}/"msgothic.ttc "${SW_PFX_FONTS}/"msgothic.ttc
        try_copy_file "${SW_FONTS}/"msyh.ttf "${SW_PFX_FONTS}/"msyh.ttf || try_copy_file "${SW_WINE_FONTS}/"msyh.ttf "${SW_PFX_FONTS}/"msyh.ttf
        try_copy_file "${SW_FONTS}/"nirmala.ttf "${SW_PFX_FONTS}/"nirmala.ttf || try_copy_file "${SW_WINE_FONTS}/"nirmala.ttf "${SW_PFX_FONTS}/"nirmala.ttf
        try_copy_file "${SW_FONTS}/"simsun.ttc "${SW_PFX_FONTS}/"simsun.ttc || try_copy_file "${SW_WINE_FONTS}/"simsun.ttc "${SW_PFX_FONTS}/"simsun.ttc
        try_copy_file "${SW_FONTS}/"times.ttf "${SW_PFX_FONTS}/"times.ttf || try_copy_file "${SW_WINE_FONTS}/"times.ttf "${SW_PFX_FONTS}/"times.ttf
        try_copy_file "${SW_FONTS}/"marlett.ttf "${SW_PFX_FONTS}/"marlett.ttf || try_copy_file "${SW_WINE_FONTS}/"marlett.ttf "${SW_PFX_FONTS}/"marlett.ttf
        try_copy_file "${SW_FONTS}/"symbol.ttf "${SW_PFX_FONTS}/"symbol.ttf || try_copy_file "${SW_WINE_FONTS}/"symbol.ttf "${SW_PFX_FONTS}/"symbol.ttf
        try_copy_file "${SW_FONTS}/"tahoma.ttf "${SW_PFX_FONTS}/"tahoma.ttf || try_copy_file "${SW_WINE_FONTS}/"tahoma.ttf "${SW_PFX_FONTS}/"tahoma.ttf
        try_copy_file "${SW_FONTS}/"tahomabd.ttf "${SW_PFX_FONTS}/"tahomabd.ttf || try_copy_file "${SW_WINE_FONTS}/"tahomabd.ttf "${SW_PFX_FONTS}/"tahomabd.ttf
        try_copy_file "${SW_FONTS}/"webdings.ttf "${SW_PFX_FONTS}/"webdings.ttf || try_copy_file "${SW_WINE_FONTS}/"webdings.ttf "${SW_PFX_FONTS}/"webdings.ttf
        try_copy_file "${SW_FONTS}/"wingding.ttf "${SW_PFX_FONTS}/"wingding.ttf || try_copy_file "${SW_WINE_FONTS}/"wingding.ttf "${SW_PFX_FONTS}/"wingding.ttf
    fi

    chmod -R 775 "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"

}

sw_shortcuts_autoinstall () {

    export SW_GAME_EXE="${WINEPREFIX}/${SW_USE_EXE}"
    export SW_GAME_NAME="$(basename "${SW_GAME_EXE}" | sed 's/\.exe//gi' | sed 's/\.msi//gi' | sed 's/ /_/g')"
    export SW_GAME_PATH="$(cd "$(dirname "${SW_GAME_EXE}")" >/dev/null 2>&1 && pwd)"

    cd "${SW_GAME_PATH}"
    wrestool -x -t14 "${SW_GAME_EXE}" > "${SW_GAME_EXE}.ico"
    icotool -x "${SW_GAME_EXE}.ico"
    try_copy_file "$(ls -S -1 "${SW_GAME_EXE}"*.png | head -n 1)" "${SW_GAME_EXE}.png"
    try_copy_file "${SW_GAME_EXE}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png"
    try_remove_file "${SW_GAME_PATH}/"*.ico
    try_remove_file "${SW_GAME_PATH}/"*.png
    convert -resize 256X256 "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png"
    convert -resize 96X96 "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x96.png"
    try_remove_file "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png"

    echo "[Desktop Entry]" > "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Name=${SW_GAME_NAME}" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Exec=env \"${START_WINE_PATH}/data/scripts/sw_start\" \"${SW_GAME_EXE}\"" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Type=Application" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Categories=Game" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Icon=${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    chmod +x "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"

    if [ ! -f "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" ]; then
        cat "${START_WINE_PATH}/data/app_config/.default" > "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        sed -i "s%wine_steam_proton%${SW_USE_WINE}%" "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        sed -i "s%pfx_default%${SW_USE_PFX}%" "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        chmod +x "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
    fi

}

try_link_d3d_plugins () {

    if [ "${SW_USE_D3D_PLUGINS}" == 1 ]; then

        for sw_d3d_plugins in d3dcompiler_33 d3dcompiler_34 d3dcompiler_35 \
            d3dcompiler_36 d3dcompiler_37 d3dcompiler_38 d3dcompiler_39 d3dcompiler_40 \
            d3dcompiler_41 d3dcompiler_42 d3dcompiler_43 d3dcompiler_46 d3dcompiler_47 \
            d3dx10_33 d3dx10_34 d3dx10_35 d3dx10_36 d3dx10_37 d3dx10_38 d3dx10_39 d3dx10_40 \
            d3dx10_41 d3dx10_42 d3dx10_43 d3dx10 d3dx11_42 d3dx11_43 d3dx9_24 d3dx9_25 d3dx9_26 \
            d3dx9_27 d3dx9_28 d3dx9_29 d3dx9_30 d3dx9_31 d3dx9_32 d3dx9_33 d3dx9_34 d3dx9_35 \
            d3dx9_36 d3dx9_37 d3dx9_38 d3dx9_39 d3dx9_40 d3dx9_41 d3dx9_42 d3dx9_43 ; do

            if [ "${WINEARCH}" != "win32" ]; then
                try_force_link_file "${START_WINE_PATH}/data/tools/utils/d3d_extras/x64/${sw_d3d_plugins}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                try_force_link_file "${START_WINE_PATH}/data/tools/utils/d3d_extras/x32/${sw_d3d_plugins}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
            else
                try_force_link_file "${START_WINE_PATH}/data/tools/utils/d3d_extras/x32/${sw_d3d_plugins}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            fi

            try_winedlloverride_update "${sw_d3d_plugins}=n"
        done
    else
        export sw_d3d_plugins="d3dcompiler_33 d3dcompiler_34 d3dcompiler_35 \
        d3dcompiler_36 d3dcompiler_37 d3dcompiler_38 d3dcompiler_39 d3dcompiler_40 \
        d3dcompiler_41 d3dcompiler_42 d3dcompiler_43 d3dcompiler_46 d3dcompiler_47 \
        d3dx10_33 d3dx10_34 d3dx10_35 d3dx10_36 d3dx10_37 d3dx10_38 d3dx10_39 d3dx10_40 \
        d3dx10_41 d3dx10_42 d3dx10_43 d3dx10 d3dx11_42 d3dx11_43 d3dx9_24 d3dx9_25 d3dx9_26 \
        d3dx9_27 d3dx9_28 d3dx9_29 d3dx9_30 d3dx9_31 d3dx9_32 d3dx9_33 d3dx9_34 d3dx9_35 \
        d3dx9_36 d3dx9_37 d3dx9_38 d3dx9_39 d3dx9_40 d3dx9_41 d3dx9_42 d3dx9_43"
        try_winedlloverride_update "${sw_d3d_plugins}=b"
    fi

}

TRY_REGEDIT_PATCH () {

    "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/${SW_USE_REGEDIT_PATCH}"

}

sw_main_pid_kill () {

    sw_main_pid="$(pgrep -f 'sw_main' | awk -F/ '{print $1}')"

    if [ ! -z "${sw_main_pid}" ]; then
        kill -n 9 ${sw_main_pid}
    fi

}

try_update_sw () {

    GIT_VER="$(curl "https://github.com/RusNor/StartWine-Launcher/releases" | grep tag/StartWine_v | head -1 | sed "s/.*StartWine_v//" | sed -r "s/<.+//")"

    if [ -z "$GIT_VER" ]; then
        crier=`$CRIER -i "$(eval_gettext "Сheck internet connection")"`
    else
        if [[ "${SW_VER}" -lt "$GIT_VER" ]]; then
            crier=`$CRIER -q "$(eval_gettext "Update to version \$GIT_VER")"`
            if [ "$(echo $crier)" == "0" ]; then
                try_remove_file "${START_WINE_PATH}/data/tmp/update_v$GIT_VER.tar.gz"
                export FTP_URL="https://github.com/RusNor/StartWine-Launcher/archive/refs/tags/StartWine_v$GIT_VER.tar.gz"
                crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/update_v$GIT_VER.tar.gz"` &&
                crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/update_v$GIT_VER.tar.gz" "${START_WINE_PATH}/data/tmp"` &&
                try_remove_dir "${START_WINE_PATH}/data/img/gui_icons"
                try_remove_dir "${START_WINE_PATH}/data/img/launcher_icons"
                try_remove_dir "${START_WINE_PATH}/data/img/sw_themes"
                try_remove_dir "${START_WINE_PATH}/data/scripts"
                try_copy_dir "${START_WINE_PATH}/data/tmp/StartWine-Launcher-StartWine_v$GIT_VER/data" "${START_WINE_PATH}"

                try_remove_file "${START_WINE_PATH}/data/tmp/update_v$GIT_VER.tar.gz"
                try_remove_dir "${START_WINE_PATH}/data/tmp/StartWine-Launcher-StartWine_v$GIT_VER"
                chmod -R 775 "${START_WINE_PATH}/data"

                crier=`$CRIER -i "$(eval_gettext "Update StartWine successful")"`
            fi
        else
            crier=`$CRIER -i "$(eval_gettext "This is the latest version")"`
        fi
    fi

}

###############################   WINELOADER   #################################

export SW_GAME_EXE="$(readlink -f "$1")"
export SW_GAME_NAME="$(basename "${SW_GAME_EXE}" | sed 's/\.exe//gi' | sed 's/\.msi//gi' | sed 's/ /_/g')"
export SW_GAME_PATH="$(cd "$(dirname "${SW_GAME_EXE}")" >/dev/null 2>&1 && pwd)"

try_path_update "${START_WINE_PATH}/data/tools/utils/bin"

if [ "${SW_GAME_NAME}" == "" ]; then
    . "${START_WINE_PATH}/data/app_config/StartWine"
else
    if [ ! -f "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" ]; then
        cat "${START_WINE_PATH}/data/app_config/.default" > "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
        chmod +x "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
    fi
    . "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
fi

export WINEDIR="${START_WINE_PATH}/data/wine/${SW_USE_WINE}"

try_ld_library_path_update "${START_WINE_PATH}/data/tools/utils/libs/lib32"
try_ld_library_path_update "${START_WINE_PATH}/data/tools/utils/libs/lib"
try_ld_library_path_update "${WINEDIR}/lib"
try_ld_library_path_update "${WINEDIR}/lib64"

try_winedllpath_update "${WINEDIR}/lib/wine"
try_winedllpath_update "${WINEDIR}/lib64/wine"

try_path_update "${WINEDIR}/bin"

export WINEARCH="${SW_USE_WINEARCH}"
export WINELOADER="${WINEDIR}/bin/wine"
export WINESERVER="${WINEDIR}/bin/wineserver"
export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"

###############################   EXPORT   #####################################

export SW_RUN_RUNIMAGE="${START_WINE_PATH}/data/runtime/sw_runtime"
export VK_LAYER_PATH="${VK_LAYER_PATH}:${START_WINE_PATH}/data/tools/utils/implicit_layer.d"
export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"
export __GL_SHADER_DISK_CACHE_PATH="${START_WINE_PATH}/data/tmp/gl_shader_cache"
export __GL_SHADER_DISK_CACHE_SIZE="1000000000"
export __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
export __GL_SHADER_DISK_CACHE=1
export MESA_SHADER_CACHE_DIR="${START_WINE_PATH}/data/tmp"
export SW_DESKTOP_DIR="$(xdg-user-dir DESKTOP)"
export DXVK_VER="${SW_USE_DXVK_VER}"
export VKD3D_VER="${SW_USE_VKD3D_VER}"

##################################  CREATE   ###################################

create_new_dir "${START_WINE_PATH}/Games"
create_new_dir "${START_WINE_PATH}/data/pfx"
create_new_dir "${START_WINE_PATH}/data/tmp"
create_new_dir "${START_WINE_PATH}/Shortcuts"
create_new_dir "${START_WINE_PATH}/data/tools"
create_new_dir "${START_WINE_PATH}/data/tmp/log"
create_new_dir "${START_WINE_PATH}/data/pfx_backup"
create_new_dir "${START_WINE_PATH}/data/tmp/vkd3d_cache"
create_new_dir "${START_WINE_PATH}/data/tmp/dxvk_cache"
create_new_dir "${START_WINE_PATH}/data/pfx/pfx_default"
create_new_dir "/home/${USER}/.local/share/applications"
create_new_dir "${START_WINE_PATH}/data/wine/wine_custom"
create_new_dir "${START_WINE_PATH}/data/wine/wine_lutris"
create_new_dir "${START_WINE_PATH}/data/tmp/gstreamer-1.0"
create_new_dir "${START_WINE_PATH}/data/wine/wine_staging"
create_new_dir "${START_WINE_PATH}/data/wine/wine_proton_ge"
create_new_dir "${START_WINE_PATH}/data/wine/wine_lutris_ge"
create_new_dir "${START_WINE_PATH}/data/tmp/gl_shader_cache"
create_new_dir "${START_WINE_PATH}/data/wine/wine_steam_proton"

if [ ! -f "${START_WINE_PATH}/data/scripts/version" ]; then
    echo "${SW_VER}" > "${START_WINE_PATH}/data/scripts/version"
fi

if [ ! -d "${HOME}/StartWine" ]; then
    try_force_link_dir "${START_WINE_PATH}" "${HOME}"
fi

if [ ! -f "/usr/share/gamemode/gamemode.ini" ] && [ ! -f "/etc/gamemode.ini" ] && [ ! -f "$HOME/.config/gamemode.ini" ]; then
    try_copy_file "${START_WINE_PATH}/data/tools/utils/config/gamemode.ini" "$HOME/.config"
fi

if [ ! -f "${HOME}/.local/share/applications/StartWine.desktop" ] && [ ! -f "/usr/share/applications/StartWine.desktop" ]; then
    sw_desktop_name="StartWine.desktop"
    echo "[Desktop Entry]" > "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Name=StartWine" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Exec=env ${START_WINE_PATH}/data/scripts/sw_start %F" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Comment=Launch Windows applications on Linux operating systems" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Type=Application" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "MimeType=application/x-wine-extension-msp;application/x-msi;application/x-ms-dos-executable;" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Categories=Game" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Icon=${START_WINE_PATH}/data/img/gui_icons/SW_Launcher_x256.png" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    chmod +x "${HOME}/.local/share/applications/${sw_desktop_name}"
fi

if [ ! -f "${HOME}/.local/share/applications/StartWine-Run.desktop" ] && [ ! -f "/usr/share/applications/StartWine-Run.desktop" ]; then
    sw_desktop_name="StartWine-Run.desktop"
    echo "[Desktop Entry]" > "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Name=StartWine-Run" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Exec=env ${START_WINE_PATH}/data/scripts/sw_run %F" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Comment=Launch Windows applications on Linux operating systems" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Type=Application" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "MimeType=application/x-wine-extension-msp;application/x-msi;application/x-ms-dos-executable;" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Categories=Game" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "NoDisplay=true" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    echo "Icon=${START_WINE_PATH}/data/img/gui_icons/SW_Launcher_x256.png" >> "${HOME}/.local/share/applications/${sw_desktop_name}"
    chmod +x "${HOME}/.local/share/applications/${sw_desktop_name}"
fi

if [ "${SW_USE_AUTOSTART_TRAY}" == 1 ]; then
    if [ ! -f "/home/${USER}/.config/autostart/StartWine-Tray.desktop" ]; then
        echo "[Desktop Entry]" > "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
        echo "Name=StartWine-Tray" >> "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
        echo "Exec=env ${START_WINE_PATH}/data/scripts/StartWine-Tray %F" >> "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
        echo "Comment=StartWine-Launcher" >> "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
        echo "Type=Application" >> "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
        echo "MimeType=text/x-python3" >> "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
        echo "Categories=Game" >> "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
        echo "Icon=${START_WINE_PATH}/data/img/gui_icons/SW_Tray.svg" >> "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
    fi
else
    if [ -f "/home/${USER}/.config/autostart/StartWine-Tray.desktop" ]; then
        try_remove_file "/home/${USER}/.config/autostart/StartWine-Tray.desktop"
    fi
fi

############################   SETTINGS OPTIONS   ##############################

if [ "${SW_USE_HUD_POSITION}" == "R" ]; then
    export HUD_POSITION="right"
else
    export HUD_POSITION="left"
fi

if [ "${SW_USE_MANGOHUD_DLSYM}" == 1 ]; then
    export SW_MANGOHUD_DLSYM=1
else
    unset SW_MANGOHUD_DLSYM
fi

if [ "${SW_USE_MANGOHUD}" == 1 ]; then
    export MANGOHUD_LOG_LEVEL=off
    export MANGOHUD_CONFIG="round_corners=10,no_display,cpu_load_change,gpu_load_change,core_load_change,background_alpha=0.2\
    ,font_size=20,background_color=020202,fps_limit=${SW_USE_FPS_LIMIT}+0,toggle_fps_limit=Shift_L+F1\
    ,position=top-${HUD_POSITION},toggle_hud=Shift_R+F12${SW_USE_MANGOHUD_CONFIG}"
    export VK_INSTANCE_LAYERS="${VK_INSTANCE_LAYERS}:SW_VK_LAYER_MANGOHUD_overlay"
else
    if [ "${SW_USE_STRANGLE_FPS_LIMIT}" == 1 ]; then
        export STRANGLE_FPS="${SW_USE_FPS_LIMIT}"
        export VK_INSTANCE_LAYERS="${VK_INSTANCE_LAYERS}:SW_VK_LAYER"
    fi
fi

if [ "${SW_USE_GAMEMODE}" == 1 ]; then
    "${START_WINE_PATH}/data/tools/utils/bin/gamemoded" > /dev/null 2>&1 &
    export SW_RUN_GAMEMODE="${START_WINE_PATH}/data/tools/utils/bin/gamemoderun"
fi

if [ "${SW_USE_RUNTIME}" == 1 ]; then
    export SW_RUN_RUNTIME="${START_WINE_PATH}/data/tools/steam-runtime/run.sh"
fi

if [ "${SW_USE_RESTORE_RESOLUTION}" == 1 ]; then
    SCREEN_RESOLUTION="$(xrandr -q | sed -n -e 's/.* connected primary \([^ +]*\).*/\1/p')"
    SCREEN_OUTPUT="$(xrandr -q | sed -n -e 's/\([^ ]*\) connected primary.*/\1/p')"

    if [ -z "${SCREEN_RESOLUTION}" ] || [ -z "${SCREEN_OUTPUT}" ]; then
        SCREEN_RESOLUTION="$(xrandr -q | sed -n -e 's/.* connected \([^ +]*\).*/\1/p')"
        SCREEN_OUTPUT="$(xrandr -q | sed -n -e 's/\([^ ]*\) connected.*/\1/p')"
    fi
fi

if [ "${SW_USE_VIRTUAL_DESKTOP}" == 1 ]; then
    VDESKTOP="explorer /desktop=`xrandr --current | grep "*" | awk '{print $1;}' | head -1`"
fi

if [ "${SW_USE_FSYNC}" == 1 ]; then
    export WINEFSYNC=1
    export WINEFSYNC_FUTEX2=1
else
    unset WINEFSYNC WINEFSYNC_FUTEX2
fi

if [ "${SW_USE_ESYNC}" == 1 ]; then
    export WINEESYNC=1
else
    unset WINEESYNC
fi

if [ "${SW_USE_OLD_GL_STRING}" == 1 ]; then
    export MESA_EXTENSION_MAX_YEAR="2003"
    export __GL_ExtensionStringVersion="17700"
fi

if [ "${SW_USE_NVAPI_DISABLE}" == 1 ]; then
    try_winedlloverride_update "nvapi,nvapi64,nvcuda,nvcuvid,nvencodeapi,nvencodeapi64="
else
    try_winedlloverride_update "nvapi,nvapi64=n;nvcuda=b"
fi

if [ "${SW_USE_WINEDBG_DISABLE}" == 1 ]; then
    export WINEDEBUG="-all"
    try_winedlloverride_update "winedbg.exe="
fi

if [ "${SW_USE_LARGE_ADDRESS_AWARE}" == 1 ]; then
    export WINE_LARGE_ADDRESS_AWARE=1
else
    unset WINE_LARGE_ADDRESS_AWARE
fi

if [ "${SW_USE_STAGING_WRITECOPY}" == 1 ]; then
    export STAGING_WRITECOPY=1
else
    unset STAGING_WRITECOPY
fi

if [ "${SW_USE_STAGING_SHARED_MEMORY}" == 1 ]; then
    export STAGING_SHARED_MEMORY=1
else
    unset STAGING_SHARED_MEMORY
fi

if [ "${SW_USE_DXVK_HUD}" == 1 ]; then
    export DXVK_FRAME_RATE="${SW_USE_FPS_LIMIT}"
    export DXVK_HUD="devinfo,fps,frametimes,version,api,scale=0.9"
fi

if [ "${SW_USE_DXVK_ASYNC}" == 1 ]; then
    export DXVK_ASYNC=1
else
    unset DXVK_ASYNC
fi

if [ "${SW_USE_ENABLE_VKBASALT}" == 1 ]; then
    export VKBASALT_CONFIG_FILE="${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf"
    export VKBASALT_SHADER_PATH="${START_WINE_PATH}/data/tools/utils/vkBasalt/shaders"
    export VKBASALT_LOG_LEVEL="none"
    export VKBASALT_LOG_FILE="${START_WINE_PATH}/data/tmp/log/vkBasalt.log"

    if [ -f "${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf" ]; then
        sed -ri "s/effects = .*/effects = ${SW_USE_VKBASALT_EFFECTS}/g" "${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf"
        sed -ri "s/casSharpness .*/casSharpness = ${SW_USE_VKBASALT_CAS}/g" "${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf"
    fi

    export VK_INSTANCE_LAYERS="${VK_INSTANCE_LAYERS}:SW_VK_LAYER_VKBASALT_post_processing"
fi

if [ "${SW_USE_FSR}" == 1 ]; then
    export WINE_FULLSCREEN_FSR=1
    export WINE_FULLSCREEN_FSR_STRENGTH=2
    export WINE_FULLSCREEN_INTEGER_SCALING=0
    export WINE_FULLSCREEN_FSR_MODE="balanced"
#    export WINE_FULLSCREEN_FSR_CUSTOM_MODE=1234x4321
#    ultra
#    quality
#    balanced
#    performance
else
    unset WINE_FULLSCREEN_FSR WINE_FULLSCREEN_FSR_STRENGTH WINE_FULLSCREEN_INTEGER_SCALING WINE_FULLSCREEN_FSR_MODE WINE_FULLSCREEN_FAKE_CURRENT_RES
fi

if [ "${SW_USE_GSTREAMER}" == 1 ]; then
    export GST_DEBUG="0:WARNING"
    export WINE_GST_REGISTRY_DIR="${START_WINE_PATH}/data/tmp/gstreamer-1.0"
    export MEDIACONV_AUDIO_DUMP_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/audio.foz"
    export MEDIACONV_AUDIO_TRANSCODED_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/transcoded_audio.foz"
    export MEDIACONV_VIDEO_DUMP_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/video.foz"
    export MEDIACONV_VIDEO_TRANSCODED_FILE="${START_WINE_PATH}/data/tmp/gstreamer-1.0/transcoded_video.foz"
    export GST_PLUGIN_SYSTEM_PATH_1_0="${WINEDIR}/lib64/gstreamer-1.0:${WINEDIR}/lib/gstreamer-1.0"
fi

if [ "${SW_USE_DRI_PRIME}" == 1 ]; then
    export __NV_PRIME_RENDER_OFFLOAD=1
    export DRI_PRIME=1
fi

if [ "${SW_USE_WINE_MONO}" == 0 ]; then
    try_winedlloverride_update "mscoree,mshtml="
fi

if [ "${SW_USE_BATTLEYE}" == 1 ]; then

    if [ -d "${HOME}/.local/share/Steam/steamapps/common/Proton BattlEye Runtime" ]; then
        export PROTON_BATTLEYE_RUNTIME="${HOME}/.local/share/Steam/steamapps/common/Proton BattlEye Runtime"
    else
        export PROTON_BATTLEYE_RUNTIME="${START_WINE_PATH}/data/tools/utils/Proton BattlEye Runtime"
    fi

    try_winedlloverride_update "beclient,beclient_x64=b,n"

else
    unset PROTON_BATTLEYE_RUNTIME
fi

if [ "${SW_USE_EASYANTICHEAT}" == 1 ]; then

    if [ -d "$HOME/.local/share/Steam/steamapps/common/Proton EasyAntiCheat Runtime" ]; then
        export PROTON_EAC_RUNTIME="$HOME/.local/share/Steam/steamapps/common/Proton EasyAntiCheat Runtime"
    else
        export PROTON_EAC_RUNTIME="${START_WINE_PATH}/data/tools/utils/Proton EasyAntiCheat Runtime"
    fi

else
    unset PROTON_EAC_RUNTIME
fi

if [ "${SW_USE_VSYNC_DISABLE}" == 1 ]; then
    export vblank_mode=0
    export __GL_SYNC_TO_VBLANK=0
fi

if [ "${SW_USE_HIDE_NVIDIA_GPU}" == 1 ]; then
    export WINE_HIDE_NVIDIA_GPU=1
fi

if [ "${SW_USE_DGVOODOO2}" == 1 ]; then
    for copy_dgvoodoo2 in d3dimm ddraw glide glide2x glide3x ; do
        if [ "${WINEARCH}" != "win32" ]; then
            try_force_link_file "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/dgVoodoo.conf" "${WINEPREFIX}/drive_c/windows/syswow64"
            try_copy_file "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/x32/${copy_dgvoodoo2}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
        else
            try_force_link_file "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/dgVoodoo.conf" "${WINEPREFIX}/drive_c/windows/system32"
            try_copy_file "${START_WINE_PATH}/data/tools/utils/dgvoodoo2/x32/${copy_dgvoodoo2}.dll" "${WINEPREFIX}/drive_c/windows/system32"
        fi
        try_winedlloverride_update "${copy_dgvoodoo2}=n"
    done
fi

if [ "${SW_USE_DLSS}" == 1 ] && [ "${SW_USE_NVAPI_DISABLE}" == 0 ]; then

    if [ ! -z "$(lspci | grep -o 'RTX')" ] && [ ! -z "$(lsmod | grep 'nvidia')" ]; then

        if [ -d "${WINEDIR}/lib/wine/nvapi" ]; then

            if [ "${WINEARCH}" != "win32" ]; then
                try_copy_file "${WINEDIR}/lib/wine/nvapi/nvapi.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                try_copy_file "${WINEDIR}/lib64/wine/nvapi/nvapi64.dll" "${WINEPREFIX}/drive_c/windows/system32"
            else
                try_copy_file "${WINEDIR}/lib/wine/nvapi/nvapi.dll" "${WINEPREFIX}/drive_c/windows/system32"
            fi

            if [ ! -f "${WINEPREFIX}/drive_c/windows/system32/nvngx.dll" ] || [ ! -f "${WINEPREFIX}/drive_c/windows/system32/_nvngx.dll" ]; then
                try_copy_file `find /usr/* -type f -name "nvngx.dll" 2>/dev/null | awk '{print $1}'` "${WINEPREFIX}/drive_c/windows/system32"
                try_copy_file `find /usr/* -type f -name "_nvngx.dll" 2>/dev/null | awk '{print $1}'` "${WINEPREFIX}/drive_c/windows/system32"
            fi
        fi

    else

        if [ -f "${START_WINE_PATH}/data/tools/utils/dlss_extras/x64/nvngx.dll" ]; then
            try_copy_file "${START_WINE_PATH}/data/tools/utils/dlss_extras/x64/nvngx.dll" "${WINEPREFIX}/drive_c/windows/system32"
            try_copy_file "${START_WINE_PATH}/data/tools/utils/dlss_extras/x64/nvngx.ini" "${WINEPREFIX}/drive_c/windows/system32"
        fi

        try_winedlloverride_update "nvngx=n"

        grep '"{41FCC608-8496-4DEF-B43E-7D9BD675A6FF}"' "${WINEPREFIX}/system.reg" &>/dev/null

        if [[ "$?" != "0" ]]; then
            "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/Enable_DLSS_patch.reg"
        fi
    fi

else

    grep '"{41FCC608-8496-4DEF-B43E-7D9BD675A6FF}"' "${WINEPREFIX}/system.reg" &>/dev/null

    if [[ "$?" == "0" ]]; then
        "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/Disable_DLSS_patch.reg"
    fi

fi

###############################   OVERRIDE DLL   ###############################

try_winedlloverride_update "lsteamclient,winemenubuilder.exe="

try_winedlloverride_update "steam_api,steam_api64,steamclient,steamclient64=n"

if [ "${SW_USE_WINEDLLOVERRIDES}" != "" ]; then
    try_winedlloverride_update "${SW_USE_WINEDLLOVERRIDES}"
fi

if [ "${SW_USE_LAUNCH_PARAMETERS}" != "" ]; then
    export LAUNCH_PARAMETERS="${SW_USE_LAUNCH_PARAMETERS}"
fi

##############################   RUNTIME DOWNLOAD   ############################

if [ ! -d "${START_WINE_PATH}/data/tools/steam-runtime" ]; then
    export FTP_URL="https://repo.steampowered.com/steamrt-images-scout/snapshots/latest-steam-client-public-beta/steam-runtime.tar.xz"
    crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/steam-runtime.tar.xz"` &&
    crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/steam-runtime.tar.xz" "${START_WINE_PATH}/data/tools"` &&
    try_remove_file "${START_WINE_PATH}/data/tmp/steam-runtime.tar.xz"
    unset LD_LIBRARY_PATH
    sleep 1
    "${START_WINE_PATH}/data/tools/steam-runtime/setup.sh" --force
fi

###############################   DXVK DOWNLOAD   ##############################

if [ ! -d "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/x64" ]; then
    try_remove_dir "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}""
    create_new_dir "${START_WINE_PATH}/data/tools/vulkan"
    export FTP_URL="https://github.com/doitsujin/dxvk/releases/download/v"${DXVK_VER}"/dxvk-"${DXVK_VER}".tar.gz"
    crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/dxvk-"${DXVK_VER}".tar.gz"` &&
    crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/dxvk-"${DXVK_VER}".tar.gz" "${START_WINE_PATH}/data/tools/vulkan"` &&
    try_remove_file "${START_WINE_PATH}/data/tmp/dxvk-"${DXVK_VER}".tar.gz"
    try_remove_file "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/setup_dxvk.sh"
fi

###############################   VKD3D DOWNLOAD   #############################

if [ ! -d "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x64" ]; then
    try_remove_dir "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}""
    create_new_dir "${START_WINE_PATH}/data/tools/vulkan"
    export FTP_URL="https://github.com/HansKristian-Work/vkd3d-proton/releases/download/v"${VKD3D_VER}"/vkd3d-proton-"${VKD3D_VER}".tar.zst"
    crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/vkd3d-proton-"${VKD3D_VER}".tar.zst"` &&
    unzstd "${START_WINE_PATH}/data/tmp/vkd3d-proton-"${VKD3D_VER}".tar.zst" &&
    crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/vkd3d-proton-"${VKD3D_VER}".tar" "${START_WINE_PATH}/data/tools/vulkan"` &&
    try_remove_file "${START_WINE_PATH}/data/tmp/vkd3d-proton-"${VKD3D_VER}".tar.zst"
    try_remove_file "${START_WINE_PATH}/data/tmp/vkd3d-proton-"${VKD3D_VER}".tar"
    try_remove_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/setup_vkd3d_proton.sh"
fi

############################   UTILS DOWNLOAD   ################################

if [ ! -f "${START_WINE_PATH}/data/tools/utils/version" ]; then
    try_remove_dir "${START_WINE_PATH}/data/tools/utils"
    try_remove_file "${START_WINE_PATH}/data/tmp/utils-"${UTILS_VER}".tar.xz"
    export FTP_URL="https://github.com/RusNor/Utils-data/releases/download/utils-"${UTILS_VER}"/utils-"${UTILS_VER}".tar.xz"
    crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/utils-"${UTILS_VER}".tar.xz"` &&
    crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/utils-"${UTILS_VER}".tar.xz" "${START_WINE_PATH}/data/tools"` &&
    try_remove_file "${START_WINE_PATH}/data/tmp/utils-"${UTILS_VER}".tar.xz"
    sed -i "s%nobody%${START_WINE_PATH}/data/tools/utils%" "${START_WINE_PATH}/data/tools/utils/config/vkBasalt.conf"
    echo "$UTILS_VER" > "${START_WINE_PATH}/data/tools/utils/version"
fi

##############################   PFX_DEFAULT DOWNLOAD  #########################

if [ ! -f "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" ]; then
    export FTP_URL="https://github.com/RusNor/pfx_backup/releases/download/pfx_default/pfx_default.iso"
    crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"`
fi

if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_default/drive_c/windows/system32/start.exe" ]; then
    if [ -f "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" ]; then
        try_remove_dir "${START_WINE_PATH}/data/pfx/pfx_default"
        unsquashfs -d "${START_WINE_PATH}/data/pfx/pfx_default" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"
    fi
fi

#############################   STEAM_PROTON DOWNLOAD   ########################

if [ "${DOWNLOAD_SP}" == 1 ]; then
    if [ ! -d "${START_WINE_PATH}/data/wine/wine_steam_proton/bin" ]; then
        try_remove_file "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}""

        export FTP_URL="https://github.com/RusNor/Wine-Steam-Proton/releases/download/steam-proton-"${SP_VER}"/steam-proton-"${SP_VER}".tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz"` &&
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz" "${START_WINE_PATH}/data/tmp"` &&

        create_new_dir "${START_WINE_PATH}/data/wine/wine_steam_proton/files"

        for copy_dir in bin lib lib64 share ; do
            try_copy_dir "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}"/${copy_dir}" "${START_WINE_PATH}/data/wine/wine_steam_proton/files"
        done

        for link_dir in bin lib lib64 share ; do
            try_force_link_dir "${START_WINE_PATH}/data/wine/wine_steam_proton/files/${link_dir}" "${START_WINE_PATH}/data/wine/wine_steam_proton"
        done

        if [ ! -f "${START_WINE_PATH}/data/wine/wine_steam_proton/version" ]; then
            echo "steam-${SP_VER}" > "${START_WINE_PATH}/data/wine/wine_steam_proton/version"
            echo "${SP_VER}" >> "${START_WINE_PATH}/data/wine/wine_steam_proton/version"
        fi

        try_remove_file "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}""
        chmod -R 775 "${START_WINE_PATH}/data/wine/wine_steam_proton"
    fi
fi

##############################   RUN VULKAN   ##################################

RUN_VULKAN () {

    if [ "${SW_USE_OPENGL}" == "1" ]; then

        try_fix_pfx

        sw_win_ver

        try_link_d3d_plugins

        unset VK_INSTANCE_LAYERS

        if [ "${WINEARCH}" != "win32" ]; then
            for wine_build_dll in d3d12 d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                try_copy_file "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                try_copy_file "${WINEDIR}/lib64/wine/x86_64-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
            for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                try_copy_file "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                try_copy_file "${WINEDIR}/lib64/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
        else
            for wine_build_dll in d3d12 d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                try_copy_file "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
            for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                try_copy_file "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
            done
        fi

        try_winedlloverride_update "d3d12,d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=b"

        try_winedlloverride_update "openvr_api_dxvk,d3d12core="

        echo "OpenGL mode"

        notify-send -a "StartWine" "$(eval_gettext "OpenGL mode")"

        if [ "${SW_USE_MANGOHUD}" == 1 ]; then
            export SW_RUN_MANGOHUD="${START_WINE_PATH}/data/tools/utils/bin/mangohud"
        fi

        cd "${SW_GAME_PATH}"

        ${SW_RUN_RUNTIME} ${SW_RUN_GAMEMODE} ${SW_RUN_MANGOHUD} "${WINELOADER}" ${VDESKTOP} "$@" ${LAUNCH_PARAMETERS} &

        sw_main_pid_kill

    else

        try_fix_pfx

        sw_win_ver

        try_link_d3d_plugins

        if [ "${WINEARCH}" != "win32" ]; then

            if [ "${SW_USE_DXVK_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/wine_proton_ge/bin" ]; then
                    for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/x64/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                else
                    for wine_dxvk_dll in openvr_api_dxvk d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib64/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                    try_copy_file "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                    try_copy_file "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/x64/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done
            fi

            if [ "${SW_USE_VKD3D_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/wine_proton_ge/bin" ]; then
                    if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/d3d12core.dll" ]; then
                        for wine_vkd3d_dll in d3d12 ; do
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/d3d12core.dll"
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                        done
                    else
                        for wine_vkd3d_dll in d3d12 d3d12core ; do
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        done
                    fi
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib64/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done

                    for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib64/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/d3d12core.dll" ]; then
                    for wine_vkd3d_dll in d3d12 ; do
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/d3d12core.dll"
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                    done
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi

                for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                    try_copy_file "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64"
                    try_copy_file "${WINEDIR}/lib64/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done

            fi

        else

            if [ "${SW_USE_DXVK_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/wine_proton_ge/bin" ]; then
                    for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                else
                    for wine_dxvk_dll in openvr_api_dxvk d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
                    try_copy_file "${START_WINE_PATH}/data/tools/vulkan/dxvk-"${DXVK_VER}"/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done
            fi

            if [ "${SW_USE_VKD3D_GE}" == "1" ]; then
                if [ ! -d "${START_WINE_PATH}/data/wine/wine_proton_ge/bin" ]; then
                    if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/d3d12core.dll" ]; then
                        for wine_vkd3d_dll in d3d12 ; do
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                        done
                    else
                        for wine_vkd3d_dll in d3d12 d3d12core ; do
                            try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        done
                    fi
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done

                    for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                        try_copy_file "${START_WINE_PATH}/data/wine/wine_proton_ge/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi
            else
                if [ ! -f "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/d3d12core.dll" ]; then
                    for wine_vkd3d_dll in d3d12 ; do
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/d3d12core.dll"
                    done
                else
                    for wine_vkd3d_dll in d3d12 d3d12core ; do
                        try_copy_file "${START_WINE_PATH}/data/tools/vulkan/vkd3d-proton-"${VKD3D_VER}"/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                    done
                fi

                for wine_vkd3d_dll in libvkd3d-1 libvkd3d-shader-1 ; do
                    try_copy_file "${WINEDIR}/lib/vkd3d/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32"
                done

            fi

        fi

        try_winedlloverride_update "libvkd3d-1,libvkd3d-shader-1,d3d12,d3d12core,openvr_api_dxvk,d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=n"

        export __GL_DXVK_OPTIMIZATIONS=1
        export DXVK_CONFIG_FILE="${START_WINE_PATH}/data/tools/utils/config/dxvk.conf"
        export DXVK_STATE_CACHE_PATH="${START_WINE_PATH}/data/tmp/dxvk_cache"
        export DXVK_STATE_CACHE=1
        export DXVK_LOG_LEVEL="none"
        export DXVK_LOG_PATH="none"

        export VKD3D_SHADER_CACHE_PATH="${START_WINE_PATH}/data/tmp/vkd3d_cache"
        export VKD3D_FEATURE_LEVEL="12_1"
        export VKD3D_SHADER_DEBUG="none"
        export VKD3D_DEBUG="none"

        echo "VULKAN mode"

        notify-send -a "StartWine" "$(eval_gettext "VULKAN mode")"

        cd "${SW_GAME_PATH}"

        ${SW_RUN_RUNTIME} ${SW_RUN_GAMEMODE} "${WINELOADER}" ${VDESKTOP} "$@" ${LAUNCH_PARAMETERS} &

        sw_main_pid_kill

    fi

}

###############################   CREATE SHORTCUT   ############################

CREATE_ICON () {

    if [ ! -f "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x96.png" ]; then

        cd "${SW_GAME_PATH}"
        wrestool -x -t14 "${SW_GAME_EXE}" > "${SW_GAME_EXE}.ico"
        icotool -x "${SW_GAME_EXE}.ico"
        try_copy_file "$(ls -S -1 "${SW_GAME_EXE}"*.png | head -n 1)" "${SW_GAME_EXE}.png"
        try_copy_file "${SW_GAME_EXE}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png"
        try_remove_file "${SW_GAME_PATH}/"*.ico
        try_remove_file "${SW_GAME_PATH}/"*.png
        convert -resize 256X256 "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png"
        convert -resize 96X96 "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png" "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x96.png"
        try_remove_file "${START_WINE_PATH}/data/img/${SW_GAME_NAME}.png"

    fi

}

CREATE_SHORTCUT () {

    if [ -d "${WINEPREFIX}" ]; then
        crier=`$CRIER -q "$(eval_gettext "Do you have a prefix for this application to use it?")"`
    else
        crier=`$CRIER -q "$(eval_gettext "Create a prefix for this application?")"`
    fi

    if [ "$(echo $crier)" == "0" ]; then
        export pfx="pfx_${SW_GAME_NAME}"
    else
        export pfx="pfx_default"
        sed -i "s%pfx_${SW_GAME_NAME}%pfx_default%" "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}"
    fi

    CREATE_ICON

    echo "[Desktop Entry]" > "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Name=${SW_GAME_NAME}" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Exec=env \"${START_WINE_PATH}/data/scripts/sw_start\" \"${SW_GAME_EXE}\"" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Type=Application" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Categories=Game" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    echo "Icon=${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png" >> "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
    chmod +x "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"

    export WINEDIR="${START_WINE_PATH}/data/wine/${SW_USE_WINE}"

    try_remove_steam_lib

    export WINELOADER="${WINEDIR}/bin/wine"
    cd "${START_WINE_PATH}/data/wine/${SW_USE_WINE}/share/wine"
    sed -i '/\AppDefaults\\/g; /HKCU,Software\\Valve\\/g; /HKLM,Software\\Wow6432Node\\lucasarts/g; /HKLM,Software\\Wow6432Node\\Valve\\Steam/g; /HKCR,steam\\/g' wine.inf

    export SW_USE_PFX=${pfx}
    export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"

    if [ ! -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then
        WINEBOOT_CS
    else
        if [ "${SW_USE_PFX}" != "pfx_default" ]; then
            crier=`$CRIER -q "$(eval_gettext "Restore prefix from backup?")"`
            if [ "$(echo $crier)" == "0" ]; then

                try_remove_dir "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" &&

                try_copy_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}" "${START_WINE_PATH}/data/app_config"
                try_remove_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
                crier=`$CRIER -i "$(eval_gettext "Restore prefix completed successfully")"`
            else
                 WINEBOOT_CS
            fi
        fi
    fi

}

WINEBOOT_CS () {

    if [ -f "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" ]; then

        if [ ! -f "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c/windows/system32/start.exe" ]; then

            crier=`$CRIER -q "$(eval_gettext "You have a backup of the default prefix. Use it to create a new prefix?")"`

            if [ "$(echo $crier)" == "0" ]; then

                unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso"

                if [ "${REIN_PFX}" == 1 ]; then
                    crier=`$CRIER -i "$(eval_gettext "Restore prefix completed successfully")"`
                fi

            else

                try_fix_pfx

                if [ "${REIN_PFX}" != 1 ]; then
                    export INST_RL_OK=1
                fi

                INSTALL_RL
            fi
        fi

    else

        if [ ! -f "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c/windows/system32/start.exe" ]; then

            try_fix_pfx

            if [ "${REIN_PFX}" != 1 ]; then
                export INST_RL_OK=1
            fi

            INSTALL_RL
        fi
    fi

}

ADD_SHORTCUT_TO_MENU () {

    if [ ! -f "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop" ]; then
        if [ "${SW_GAME_NAME}" != "StartWine" ]; then
            echo "[Desktop Entry]" > "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            echo "Name=${SW_GAME_NAME}" >> "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            echo "Exec=env \"${START_WINE_PATH}/data/scripts/sw_run\" \"${SW_GAME_EXE}\"" >> "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            echo "Type=Application" >> "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            echo "Categories=Game" >> "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            echo "Icon=${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png" >> "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            chmod +x "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            notify-send -a "StartWine" "$(eval_gettext "Shortcut \${SW_GAME_NAME} created in system menu")"
        fi
    else
        if [ "${SW_GAME_NAME}" != "StartWine" ]; then
            try_remove_file "${HOME}/.local/share/applications/${SW_GAME_NAME}.desktop"
            notify-send -a "StartWine" "$(eval_gettext "Shortcut \${SW_GAME_NAME} removed from system menu")"
        fi
    fi

}

ADD_SHORTCUT_TO_DESKTOP () {

    if [ ! -f "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop" ]; then
        if [ "${SW_GAME_NAME}" != "StartWine" ]; then
            echo "[Desktop Entry]" > "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            echo "Name=${SW_GAME_NAME}" >> "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            echo "Exec=env \"${START_WINE_PATH}/data/scripts/sw_run\" \"${SW_GAME_EXE}\"" >> "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            echo "Type=Application" >> "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            echo "Categories=Game" >> "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            echo "Icon=${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png" >> "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            chmod +x "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            notify-send -a "StartWine" "$(eval_gettext "Shortcut \${SW_GAME_NAME} created in desktop")"
        fi
    else
        if [ "${SW_GAME_NAME}" != "StartWine" ]; then
            try_remove_file "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"
            notify-send -a "StartWine" "$(eval_gettext "Shortcut \${SW_GAME_NAME} removed from desktop")"
        fi
    fi

}

#################################   PREFIX TOOLS   #############################

REMOVE_PFX () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to remove the prefix?")"`

    if [ "$(echo $crier)" == "0" ]; then

        try_remove_dir "${START_WINE_PATH}/data/pfx/pfx_${SW_GAME_NAME}"
        try_remove_file "${START_WINE_PATH}/Shortcuts/${SW_GAME_NAME}.desktop"
        try_remove_file "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x96.png"
        try_remove_file "${START_WINE_PATH}/data/img/${SW_GAME_NAME}_x256.png"
        try_remove_file "${SW_DESKTOP_DIR}/${SW_GAME_NAME}.desktop"

        if [ "${SW_GAME_NAME}" != "StartWine" ]; then
            try_remove_file "/home/${USER}/.local/share/applications/${SW_GAME_NAME}.desktop"
        fi

        notify-send -a "StartWine" "$(eval_gettext "Shortcut and prefix \${SW_GAME_NAME} removed")"

    fi

}

REINSTALL_PFX () {

    if [ ! -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then

        crier=`$CRIER -q "$(eval_gettext "Remove old prefix?")"`

        if [ "$(echo $crier)" == "0" ]; then

            try_remove_dir "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"

            export REIN_PFX=1

            WINEBOOT_CS

        fi

    else

        crier=`$CRIER -q "$(eval_gettext "Restore prefix from backup?")"`

        if [ "$(echo $crier)" == "0" ]; then

            try_remove_dir "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
            unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" &&

            try_copy_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}" "${START_WINE_PATH}/data/app_config"
            try_remove_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
            crier=`$CRIER -i "$(eval_gettext "Restore prefix completed successfully")"`

        else

            crier=`$CRIER -q "$(eval_gettext "Remove old prefix?")"`

            if [ "$(echo $crier)" == "0" ]; then

                try_remove_dir "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"

                export REIN_PFX=1

                WINEBOOT_CS

            fi
        fi
    fi

}

SW_PFX_BACKUP () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to backup the prefix?")"`

    if [ "$(echo $crier)" == "0" ]; then

        if [ -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then

            crier=`$CRIER -q "$(eval_gettext "Overwrite old backup?")"`

            if [ "$(echo $crier)" == "0" ]; then

                try_copy_file "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                try_remove_file "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso"
                mksquashfs "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
                try_remove_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
                crier=`$CRIER -i "$(eval_gettext "Backup completed successfully")"`

            fi

        else

            try_copy_file "${START_WINE_PATH}/data/app_config/${SW_GAME_NAME}" "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
            try_remove_file "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso"
            mksquashfs "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
            try_remove_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
            crier=`$CRIER -i "$(eval_gettext "Backup completed successfully")"`

        fi

    fi

}

SW_PFX_RESTORE () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to restore the prefix?")"`

    if [ "$(echo $crier)" == "0" ]; then

        if [ ! -f "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" ]; then
            crier=`$CRIER -i "$(eval_gettext "You do not have a backup create it first")"`

            if [ -f "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" ]; then
                crier=`$CRIER -q "$(eval_gettext "You have a backup of the default prefix. Use it to recover prefix?")"`
                if [ "$(echo $crier)" == "0" ]; then
                    try_remove_dir "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
                    unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/pfx_default.iso" &&
                    crier=`$CRIER -i "$(eval_gettext "Restore completed successfully")"`
                fi
            fi

        else

            try_remove_dir "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
            unsquashfs -d "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}" "${START_WINE_PATH}/data/pfx_backup/${SW_USE_PFX}.iso" &&

            try_copy_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}" "${START_WINE_PATH}/data/app_config"
            try_remove_file "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/${SW_GAME_NAME}"
            crier=`$CRIER -i "$(eval_gettext "Restore completed successfully")"`

        fi
    fi

}

SW_PFX_FULL_BACKUP () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to backup all the prefixes?")"`

    if [ "$(echo $crier)" == "0" ]; then

        if [ -f "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" ]; then

            crier=`$CRIER -q "$(eval_gettext "Overwrite old backup?")"`

            if [ "$(echo $crier)" == "0" ]; then
                try_remove_file "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso"
                mksquashfs "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
                crier=`$CRIER -i "$(eval_gettext "Full backup completed successfully")"`
            fi

        else

            mksquashfs "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" -noappend -b 1M -comp zstd -Xcompression-level 1 &&
            crier=`$CRIER -i "$(eval_gettext "Full backup completed successfully")"`
        fi
    fi

}

SW_PFX_FULL_RESTORE () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to restore all the prefixes?")"`

    if [ "$(echo $crier)" == "0" ]; then

        if [ ! -f "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" ]; then
                crier=`$CRIER -i "$(eval_gettext "You do not have a backup create it first")"`
        else
            crier=`$CRIER -q "$(eval_gettext "Would you like to save the current prefixes?")"`
            if [ "$(echo $crier)" == "0" ]; then
                mv "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_old"
                unsquashfs -d "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" &&
                crier=`$CRIER -i "$(eval_gettext "Full Restore completed successfully")"`
            else
                try_remove_dir "${START_WINE_PATH}/data/pfx"
                unsquashfs -d "${START_WINE_PATH}/data/pfx" "${START_WINE_PATH}/data/pfx_backup/pfx_full_backup.iso" &&
                crier=`$CRIER -i "$(eval_gettext "Full Restore completed successfully")"`
            fi
        fi

    fi

}

SW_CLEAR_PFX () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to clear the prefix?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_clear_pfx
    fi

}

##################################   WINE_TOOLS   ##############################

WINECFG () {

    try_fix_pfx

    "${WINELOADER}" "winecfg"

}

WINECONSOLE () {

    try_fix_pfx

    cd "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c"
    "${WINELOADER}" "wineconsole"

}

REGEDIT () {

    try_fix_pfx

    "${WINELOADER}" "regedit"

}

WINEFILE () {

    try_fix_pfx

    ${SW_RUN_RUNTIME} "${WINELOADER}" ${VDESKTOP} "explorer"

}

UNINSTALLER () {

    try_fix_pfx

    cd "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/drive_c"
    "${WINELOADER}" "uninstaller"

}

SW_WINETRICKS () {

    unset VK_INSTANCE_LAYERS

    if [ -f "${START_WINE_PATH}/data/scripts/winetricks" ]; then
        try_remove_file "${START_WINE_PATH}/data/scripts/winetricks"
    fi

    export FTP_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
    crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/scripts/winetricks"` &&
    chmod +x "${START_WINE_PATH}/data/scripts/winetricks"

    try_fix_pfx

    export WINE="${WINELOADER}"

    "${START_WINE_PATH}/data/scripts/winetricks" -q -f ${DLL} || libraries_init_error
    "${WINESERVER}" -w

    if [ "${INSTALL_OK}" == 1 ]; then
        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`
    else
        crier=`$CRIER -i "$(eval_gettext "Libraries installed successfully")"`
    fi

}

INSTALL_RL () {

    unset VK_INSTANCE_LAYERS

    crier=`$CRIER -q "$(eval_gettext "Install recommended libraries?")"`

    if [ "$(echo $crier)" == "0" ]; then

        if [ -f "${START_WINE_PATH}/data/scripts/winetricks" ]; then
            try_remove_file "${START_WINE_PATH}/data/scripts/winetricks"
        fi

        export FTP_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/scripts/winetricks"` &&
        chmod +x "${START_WINE_PATH}/data/scripts/winetricks"

        try_fix_pfx

        export WINE="${WINELOADER}"

        "${START_WINE_PATH}/data/scripts/winetricks" -q -f mfc120 mfc42 msvcirt openal physx vb6run vcrun2005 vcrun2008 vcrun2010 \
        vcrun2012 vcrun2013 vcrun2022 vcrun6 vcrun6sp6 lucida nocrashdialog || libraries_init_error
        "${WINESERVER}" -w

        if [ ! -f "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/btn.log" ];then
            for btn_log in 207 210 228 240 270 272 273 274 275 276 279 281 280 ; do
                echo "${btn_log}" >> "${START_WINE_PATH}/data/pfx/${SW_USE_PFX}/btn.log"
            done
        fi

        if [ "${INST_RL_OK}" == 1 ]; then
            echo " "
        else
            if [ "${INSTALL_OK}" == 1 ]; then
                crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`
            else
                crier=`$CRIER -i "$(eval_gettext "Libraries installed successfully")"`
            fi
        fi
    fi

}

#################################   DEBUG   ####################################

DEBUG_LOG () {

    echo "Application name ${SW_GAME_NAME}" > "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "Date and time" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    date >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "Operating system" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    lsb_release -d | sed s/Description/ОС/g >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "Desktop Environment" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "$DESKTOP_SESSION" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "${XDG_CURRENT_DESKTOP}" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "Kernel" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    uname -r >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "CPU" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    cat /proc/cpuinfo | grep "model name" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "RAM" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    free -m >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "Graphic cards" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    lspci | grep VGA >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    glxinfo | grep OpenGL >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "Version WINE" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    "$WINELOADER" --version 2>&1 | tee -a "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "--------------------------------------------------------------------------------------------------" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    echo "log WINE" >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"

}

DEBUG_VULKAN () {

    DEBUG_LOG

    RUN_VULKAN >> "${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log" 2>&1 "$@"
    crier=`$CRIER -i "$(eval_gettext "Please wait a while then press ok to open the log file")"`
    zData="${START_WINE_PATH}/data/tmp/${SW_GAME_NAME}.log"
    crier=`$CRIER -t "${zData}"`

    STOP

}

##############################   DOWNLOAD WINE   ###############################

WINE_1 () {

    try_remove_file "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64.tar.xz" &&
    try_remove_dir "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64"

    if [ ! -d "${START_WINE_PATH}/data/wine/wine_staging/bin" ]; then
        export FTP_URL="https://github.com/Kron4ek/Wine-Builds/releases/download/"${STAG_VER}"/wine-"${STAG_VER}"-staging-amd64.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64.tar.xz"`

        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64.tar.xz" "${START_WINE_PATH}/data/tmp"`
        for copy_dir in bin lib share ; do
            try_copy_dir "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine_staging"
        done
        try_remove_file "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64.tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/wine-"${STAG_VER}"-staging-amd64"
    fi

    if [ ! -f "${START_WINE_PATH}/data/wine/wine_staging/version" ]; then
        echo "wine-staging ${STAG_VER}" > "${START_WINE_PATH}/data/wine/wine_staging/version"
        echo "${STAG_VER}" >> "${START_WINE_PATH}/data/wine/wine_staging/version"
    fi

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine_staging"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine_staging/bin" ]; then
            crier=`$CRIER -i "$(eval_gettext "Downloading wine staging completed successfully")"`
        else
            crier=`$CRIER -e "$(eval_gettext "Download failed, try again")"`
        fi
    fi

}

WINE_2 () {

    try_remove_file "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz" &&
    try_remove_dir "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}""

    if [ ! -d "${START_WINE_PATH}/data/wine/wine_steam_proton/bin" ]; then
        export FTP_URL="https://github.com/RusNor/Wine-Steam-Proton/releases/download/steam-proton-"${SP_VER}"/steam-proton-"${SP_VER}".tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz"` &&
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz" "${START_WINE_PATH}/data/tmp"` &&

        create_new_dir "${START_WINE_PATH}/data/wine/wine_steam_proton/files"

        for copy_dir in bin lib lib64 share ; do
            try_copy_dir "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}"/${copy_dir}" "${START_WINE_PATH}/data/wine/wine_steam_proton/files"
        done

        for link_dir in bin lib lib64 share ; do
            try_force_link_dir "${START_WINE_PATH}/data/wine/wine_steam_proton/files/${link_dir}" "${START_WINE_PATH}/data/wine/wine_steam_proton"
        done

        if [ ! -f "${START_WINE_PATH}/data/wine/wine_steam_proton/version" ]; then
            echo "steam-${SP_VER}" > "${START_WINE_PATH}/data/wine/wine_steam_proton/version"
            echo "${SP_VER}" >> "${START_WINE_PATH}/data/wine/wine_steam_proton/version"
        fi

        try_remove_file "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}".tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/steam-proton-"${SP_VER}""
    fi

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine_steam_proton"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine_steam_proton/bin" ]; then
            crier=`$CRIER -i "$(eval_gettext "Downloading wine steam proton completed successfully")"`
        else
            crier=`$CRIER -e "$(eval_gettext "Download failed, try again")"`
        fi
    fi

}

WINE_3 () {

    try_remove_file "${START_WINE_PATH}/data/tmp/GE-Proton"${GE_VER}".tar.gz" &&
    try_remove_dir "${START_WINE_PATH}/data/tmp/GE-Proton"${GE_VER}""

    if [ ! -d "${START_WINE_PATH}/data/wine/wine_proton_ge/bin" ]; then
        export FTP_URL="https://github.com/GloriousEggroll/proton-ge-custom/releases/download/GE-Proton"${GE_VER}"/GE-Proton"${GE_VER}".tar.gz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GE-Proton"${GE_VER}".tar.gz"` &&

        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/GE-Proton"${GE_VER}".tar.gz" "${START_WINE_PATH}/data/tmp"` &&
        try_copy_dir "${START_WINE_PATH}/data/tmp/GE-Proton"${GE_VER}"/files" "${START_WINE_PATH}/data/wine/wine_proton_ge"

        for link_dir in bin lib lib64 share ; do
            try_force_link_dir "${START_WINE_PATH}/data/wine/wine_proton_ge/files/${link_dir}" "${START_WINE_PATH}/data/wine/wine_proton_ge"
        done

        if [ ! -f "${START_WINE_PATH}/data/wine/wine_proton_ge/version" ]; then
            echo "GE-${GE_VER}" > "${START_WINE_PATH}/data/wine/wine_proton_ge/version"
            echo "${GE_VER}" >> "${START_WINE_PATH}/data/wine/wine_proton_ge/version"
        fi

        try_remove_file "${START_WINE_PATH}/data/tmp/GE-Proton"${GE_VER}".tar.gz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/GE-Proton"${GE_VER}""
    fi

    cd "${START_WINE_PATH}/data/wine/wine_proton_ge/share/wine"
    sed -i '/\AppDefaults\\/g; /HKCU,Software\\Valve\\/g; /HKLM,Software\\Wow6432Node\\lucasarts/g; /HKLM,Software\\Wow6432Node\\Valve\\Steam/g; /HKCR,steam\\/g' wine.inf

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine_proton_ge"

    export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"

    try_remove_steam_lib

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine_proton_ge/bin" ]; then
            crier=`$CRIER -i "$(eval_gettext "Downloading wine proton ge completed successfully")"`
        else
            crier=`$CRIER -e "$(eval_gettext "Download failed, try again")"`
        fi
    fi

}

WINE_4 () {

    try_remove_file "${START_WINE_PATH}/data/tmp/wine-lutris-"${LUTRIS_VER}"-x86_64.tar.xz" &&
    try_remove_dir "${START_WINE_PATH}/data/tmp/lutris-"${LUTRIS_VER}"-x86_64"

    if [ ! -d "${START_WINE_PATH}/data/wine/wine_lutris/bin" ]; then
        export FTP_URL="https://github.com/lutris/wine/releases/download/lutris-wine-"${LUTRIS_VER}"/wine-lutris-"${LUTRIS_VER}"-x86_64.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/wine-lutris-"${LUTRIS_VER}"-x86_64.tar.xz"` &&

        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/wine-lutris-"${LUTRIS_VER}"-x86_64.tar.xz" "${START_WINE_PATH}/data/tmp"` &&
        for copy_dir in bin lib lib64 share ; do
            try_copy_dir "${START_WINE_PATH}/data/tmp/lutris-"${LUTRIS_VER}"-x86_64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine_lutris"
        done
        try_remove_file "${START_WINE_PATH}/data/tmp/wine-lutris-"${LUTRIS_VER}"-x86_64.tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/lutris-"${LUTRIS_VER}"-x86_64"
    fi

    cd "${START_WINE_PATH}/data/wine/wine_lutris/share/wine"
    sed -i '/\AppDefaults\\/g' wine.inf

    if [ ! -f "${START_WINE_PATH}/data/wine/wine_lutris/version" ]; then
        echo "wine-lutris ${LUTRIS_VER}" > "${START_WINE_PATH}/data/wine/wine_lutris/version"
        echo "${LUTRIS_VER}" >> "${START_WINE_PATH}/data/wine/wine_lutris/version"
    fi

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine_lutris"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine_lutris/bin" ]; then
            crier=`$CRIER -i "$(eval_gettext "Downloading wine lutris completed successfully")"`
        else
            crier=`$CRIER -e "$(eval_gettext "Download failed, try again")"`
        fi
    fi

}

WINE_5 () {

    try_remove_file "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64.tar.xz" &&
    try_remove_dir "${START_WINE_PATH}/data/tmp/lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64"

    if [ ! -d "${START_WINE_PATH}/data/wine/wine_lutris_ge/bin" ]; then
        export FTP_URL="https://github.com/GloriousEggroll/wine-ge-custom/releases/download/GE-Proton"${LUTRIS_GE_VER}"/wine-lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64.tar.xz"` &&
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64.tar.xz" "${START_WINE_PATH}/data/tmp"` &&

        create_new_dir "${START_WINE_PATH}/data/wine/wine_lutris_ge/files"

        for copy_dir in bin lib lib64 share ; do
            try_copy_dir "${START_WINE_PATH}/data/tmp/lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine_lutris_ge/files"
        done

        for link_dir in bin lib lib64 share ; do
            try_force_link_dir "${START_WINE_PATH}/data/wine/wine_lutris_ge/files/${link_dir}" "${START_WINE_PATH}/data/wine/wine_lutris_ge"
        done

        try_remove_file "${START_WINE_PATH}/data/tmp/wine-lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64.tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/lutris-GE-Proton"${LUTRIS_GE_VER}"-x86_64"
    fi

    cd "${START_WINE_PATH}/data/wine/wine_lutris_ge/share/wine"
    sed -i '/HKLM,Software\\Wow6432Node\\lucasarts/g; /\AppDefaults\\/g' wine.inf

    if [ ! -f "${START_WINE_PATH}/data/wine/wine_lutris_ge/version" ]; then
        echo "Lutris-GE-${LUTRIS_GE_VER}" > "${START_WINE_PATH}/data/wine/wine_lutris_ge/version"
        echo "${LUTRIS_GE_VER}" >> "${START_WINE_PATH}/data/wine/wine_lutris_ge/version"
    fi

    chmod -R 775 "${START_WINE_PATH}/data/wine/wine_lutris_ge"

    if [ "${WINE_OK}" == 1 ]; then
        echo " "
    else
        if [ -d "${START_WINE_PATH}/data/wine/wine_lutris_ge/bin" ]; then
            crier=`$CRIER -i "$(eval_gettext "Downloading wine lutris ge completed successfully")"`
        else
            crier=`$CRIER -e "$(eval_gettext "Download failed, try again")"`
        fi
    fi

}

WINE_6 () {

    xdg-open "${START_WINE_PATH}/data/wine/wine_custom"

}

RM_WINE_1 () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to remove the wine staging?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove_dir "${START_WINE_PATH}/data/wine/wine_staging"
        create_new_dir "${START_WINE_PATH}/data/wine/wine_staging"
    fi

}

RM_WINE_2 () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to remove the wine steam proton?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove_dir "${START_WINE_PATH}/data/wine/wine_steam_proton"
        create_new_dir "${START_WINE_PATH}/data/wine/wine_steam_proton"
    fi

}

RM_WINE_3 () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to remove the wine proton ge?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove_dir "${START_WINE_PATH}/data/wine/wine_proton_ge"
        create_new_dir "${START_WINE_PATH}/data/wine/wine_proton_ge"
    fi

}

RM_WINE_4 () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to remove the wine lutris?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove_dir "${START_WINE_PATH}/data/wine/wine_lutris"
        create_new_dir "${START_WINE_PATH}/data/wine/wine_lutris"
    fi

}

RM_WINE_5 () {

    crier=`$CRIER -q "$(eval_gettext "Do you really want to remove the wine lutris ge?")"`

    if [ "$(echo $crier)" == "0" ]; then
        try_remove_dir "${START_WINE_PATH}/data/wine/wine_lutris_ge"
        create_new_dir "${START_WINE_PATH}/data/wine/wine_lutris_ge"
    fi

}

##################################   STOP   ####################################

STOP () {

    wine_pids="$(ls -l /proc/*/exe 2>/dev/null | grep -E 'wine(64)?-preloader|wineserver' | awk -F/ '{print $3}')"
    if [ ! -z "${wine_pids}" ]; then
        kill -n 9 ${wine_pids}
    fi

    notify-send -a "StartWine" "$(eval_gettext "Kill wine porocesses")"

    exit

}

#############################   AUTOINSTALL APP   ##############################

INSTALL_BATTLE_NET () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Battle.net/drive_c/Program Files (x86)/Battle.net/Battle.net.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Battle.net"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Battle.net_0.1/Battle.net_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Battle.net_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Battle.net_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Battle.net_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Battle.net/Battle.net.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_EPICGAMES () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_EpicGamesLauncher/drive_c/Program Files (x86)/Epic Games/Launcher/Portal/Binaries/Win32/EpicGamesLauncher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_EpicGamesLauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/EpicGames_0.1/EpicGames_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/EpicGames_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/EpicGames_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/EpicGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Epic Games/Launcher/Portal/Binaries/Win32/EpicGamesLauncher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_EVE_ONLINE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_evelauncher/drive_c/EVE/Launcher/evelauncher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_evelauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/EVE_0.1/EVE_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/EVE_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/EVE_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/EVE_0.1.tar.xz"

        SW_USE_EXE="drive_c/EVE/Launcher/evelauncher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_GAMECENTER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_GameCenter/drive_c/GameCenter/GameCenter.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_GameCenter"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/Disable_VIRTUAL_DESKTOP_patch.reg"

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/GameCenter_0.1/GameCenter_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GameCenter_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/GameCenter_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/GameCenter_0.1.tar.xz"

        SW_USE_EXE="drive_c/GameCenter/GameCenter.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_GALAXYCLIENT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_GalaxyClient/drive_c/Program Files (x86)/GOG Galaxy/GalaxyClient.exe" ]; then

        WINE_OK=1
        WINE_3

        export GOG_VER=2.0.46.133
        export FTP_URL="https://content-system.gog.com/open_link/download?path=/open/galaxy/client/${GOG_VER}/setup_galaxy_${GOG_VER}.exe"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/setup_galaxy_${GOG_VER}.exe"`

        export SW_USE_PFX="pfx_GalaxyClient"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/setup_galaxy_${GOG_VER}.exe" /VERYSILENT /NORESTART "$@"

        while pgrep -fa 'setup_galaxy_${GOG_VER}' &>/dev/null ; do sleep 1 ; done

        SW_USE_EXE="drive_c/Program Files (x86)/GOG Galaxy/GalaxyClient.exe"
        SW_USE_WINE="wine_proton_ge"

        try_remove_file "${START_WINE_PATH}/data/tmp/setup_galaxy_${GOG_VER}.exe"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_RIOTCLIENT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_RiotClientServices/drive_c/Riot Games/Riot Client/RiotClientServices.exe" ]; then

        try_remove_file "${START_WINE_PATH}/data/tmp/wine-lutris-ge-lol-8.7-1-x86_64.tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/lutris-ge-lol-8.7-1-x86_64"

        if [ ! -d "${START_WINE_PATH}/data/wine/wine_custom/lutris-ge-lol/bin" ]; then
            export FTP_URL="https://github.com/GloriousEggroll/wine-ge-custom/releases/download/8.7-GE-1-LoL/wine-lutris-ge-lol-8.7-1-x86_64.tar.xz"
            crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/wine-lutris-ge-lol-8.7-1-x86_64.tar.xz"` &&
            create_new_dir "${START_WINE_PATH}/data/wine/wine_custom/lutris-ge-lol"
            crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/wine-lutris-ge-lol-8.7-1-x86_64.tar.xz" "${START_WINE_PATH}/data/tmp"` &&

            for copy_dir in bin lib lib64 share ; do
                try_copy_dir "${START_WINE_PATH}/data/tmp/lutris-ge-lol-8.7-1-x86_64/${copy_dir}" "${START_WINE_PATH}/data/wine/wine_custom/lutris-ge-lol"
            done

            try_remove_file "${START_WINE_PATH}/data/tmp/wine-lutris-ge-lol-8.7-1-x86_64.tar.xz" &&
            try_remove_dir "${START_WINE_PATH}/data/tmp/lutris-ge-lol-8.7-1-x86_64"
        fi

        chmod -R 775 "${START_WINE_PATH}/data/wine/wine_custom/lutris-ge-lol"

        export SW_USE_PFX="pfx_RiotClientServices"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_custom/lutris-ge-lol"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/RiotGames_0.1/RiotGames_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/RiotGames_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/RiotGames_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/RiotGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Riot Games/Riot Client/RiotClientServices.exe"
        SW_USE_WINE="wine_custom/lutris-ge-lol"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_EA_LAUNCHER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_EALauncher/drive_c/Program Files/Electronic Arts/EA Desktop/EA Desktop/EALauncher.exe" ]; then

        WINE_OK=1
        WINE_3

        export FTP_URL="https://origin-a.akamaihd.net/EA-Desktop-Client-Download/installer-releases/EAappInstaller.exe"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/EAappInstaller.exe"`

        export SW_USE_PFX="pfx_EALauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/EAappInstaller.exe" /silent "$@"

        while pgrep -fa 'EAappInstaller' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        try_remove_file "${START_WINE_PATH}/data/tmp/EAappInstaller.exe"

        SW_USE_EXE="drive_c/Program Files/Electronic Arts/EA Desktop/EA Desktop/EALauncher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="dotnet20 dotnet48"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_ROCKSTARGAMES () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Launcher/drive_c/Program Files/Rockstar Games/Launcher/Launcher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/RockstarGames_0.1/RockstarGames_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/RockstarGames_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/RockstarGames_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/RockstarGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files/Rockstar Games/Launcher/Launcher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_STEAM () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_steam/drive_c/Program Files (x86)/Steam/steam.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_steam"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_steam_proton"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

       "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/Steam_patch.reg"

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Steam_0.1/Steam_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Steam_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Steam_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Steam_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Steam/steam.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_UBISOFT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_UbisoftConnect/drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/UbisoftConnect.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_UbisoftConnect"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Ubisoft_0.1/Ubisoft_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Ubisoft_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Ubisoft_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Ubisoft_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Ubisoft/Ubisoft Game Launcher/UbisoftConnect.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_WARGAMING () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_wgc_api/drive_c/ProgramData/Wargaming.net/GameCenter/api/wgc_api.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_wgc_api"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Wargaming.net_0.1/Wargaming.net_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Wargaming.net_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Wargaming.net_0.1.tar.xz" "${WINEPREFIX}/drive_c/ProgramData"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Wargaming.net_0.1.tar.xz"

        SW_USE_EXE="drive_c/ProgramData/Wargaming.net/GameCenter/api/wgc_api.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_ZONA () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Zona/drive_c/Program Files (x86)/Zona/Zona.exe" ]; then

        WINE_OK=1
        WINE_3

        export FTP_URL="https://dlf1.appzona.org/ZonaSetup[mpj07].exe"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/ZonaSetup.exe"`

        export SW_USE_PFX="pfx_Zona"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/ZonaSetup.exe" /silent "$@"

        while pgrep -fa 'ZonaSetup' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        SW_USE_EXE="drive_c/Program Files (x86)/Zona/Zona.exe"
        SW_USE_WINE="wine_proton_ge"

        try_remove_file "${START_WINE_PATH}/data/tmp/ZonaSetup.exe"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_BETHESDANET () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_BethesdaNetLauncher/drive_c/Program Files (x86)/Bethesda.net Launcher/BethesdaNetLauncher.exe" ]; then

        WINE_OK=1
        WINE_3

        export FTP_URL="https://download.cdp.bethesda.net/BethesdaNetLauncher_Setup.exe"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/BethesdaNetLauncher_Setup.exe"`

        export SW_USE_PFX="pfx_BethesdaNetLauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/BethesdaNetLauncher_Setup.exe" /VERYSILENT "$@"

        while pgrep -fa 'BethesdaNetLauncher_Setup' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        SW_USE_EXE="drive_c/Program Files (x86)/Bethesda.net Launcher/BethesdaNetLauncher.exe"
        SW_USE_WINE="wine_proton_ge"

        try_remove_file "${START_WINE_PATH}/data/tmp/BethesdaNetLauncher_Setup.exe"

        sleep 0.5

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_OSU () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/osu!/osu!.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_osu!"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        "${WINELOADER}" "regedit" "${START_WINE_PATH}/data/app_patches/Osu_patch.reg"

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/osu_0.1/osu_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/osu_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/osu_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/osu_0.1.tar.xz"

        SW_USE_EXE="drive_c/osu!/osu!.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        if [ ! -d "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy" ]; then
            export FTP_URL="https://github.com/openglfreak/winestreamproxy/releases/download/v2.0.3/winestreamproxy-2.0.3-amd64.tar.gz"
            crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/winestreamproxy-2.0.3-amd64.tar.gz"` &&
            create_new_dir "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"
            create_new_dir "${START_WINE_PATH}/data/tmp/winestreamproxy"
            crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/winestreamproxy-2.0.3-amd64.tar.gz" "${START_WINE_PATH}/data/tmp/winestreamproxy"` &&

            try_copy_file "${START_WINE_PATH}/data/tmp/winestreamproxy/settings.conf" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"
            try_copy_file "${START_WINE_PATH}/data/tmp/winestreamproxy/winestreamproxy.exe" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"
            try_copy_file "${START_WINE_PATH}/data/tmp/winestreamproxy/winestreamproxy_unixlib.dll.so" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"

            try_remove_file "${START_WINE_PATH}/data/tmp/winestreamproxy-2.0.3-amd64.tar.gz" &&
            try_remove_dir "${START_WINE_PATH}/data/tmp/winestreamproxy"

            export FTP_URL="https://github.com/openglfreak/osu-handler-wine/releases/download/v0.3.0/osu-handler-wine"
            crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy/osu-handler-wine"` &&
            echo "done"
        fi

        chmod -R 775 "${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy"

        if [ ! -f "/home/${USER}/.local/share/applications/Add-Osu-Plugin.desktop" ]; then
            Add_Osu_Plugin="Add-Osu-Plugin.desktop"
            echo "[Desktop Entry]" > "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Name=Add-Osu-Plugin" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Exec=env ${START_WINE_PATH}/data/pfx/pfx_osu!/drive_c/winestreamproxy/osu-handler-wine %f" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Comment=Osu Plugins" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Type=Application" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "MimeType=osz;osk;" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Categories=Game" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "NoDisplay=true" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            echo "Icon=${START_WINE_PATH}/data/img/osu!_x256.png" >> "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
            chmod +x "/home/${USER}/.local/share/applications/${Add_Osu_Plugin}"
        fi

        export DLL="dotnet40"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_ANKAMA () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Ankama_Launcher/drive_c/users/steamuser/AppData/Local/Programs/Ankama Launcher/Ankama Launcher.exe" ]; then

        WINE_OK=1
        WINE_3

        export FTP_URL="https://launcher.cdn.ankama.com/installers/production/Ankama%20Launcher-Setup.exe"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Ankama Launcher-Setup.exe"`

        export SW_USE_PFX="pfx_Ankama_Launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/Ankama Launcher-Setup.exe" /S "$@"

        while pgrep -fa 'Ankama Launcher-Setup' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        SW_USE_EXE="drive_c/users/steamuser/AppData/Local/Programs/Ankama Launcher/Ankama Launcher.exe"
        SW_USE_WINE="wine_proton_ge"

        try_remove_file "${START_WINE_PATH}/data/tmp/Ankama Launcher-Setup.exe"

        sleep 0.5

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_GFCLIENT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_gfclient/drive_c/Program Files (x86)/GameforgeClient/gfclient.exe" ]; then

        WINE_OK=1
        WINE_3

        export FTP_URL="https://raw.githubusercontent.com/WarfaceZ/lutris-clients/master/GameforgeInstaller.exe"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GameforgeInstaller.exe"`

        export SW_USE_PFX="pfx_gfclient"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/GameforgeInstaller.exe" "$@"

        while pgrep -fa 'GameforgeLoginS' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        SW_USE_EXE="drive_c/Program Files (x86)/GameforgeClient/gfclient.exe"
        SW_USE_WINE="wine_proton_ge"

        try_remove_file "${START_WINE_PATH}/data/tmp/GameforgeInstaller.exe"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_ITCH () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_itch/drive_c/users/steamuser/AppData/Local/itch/app-25.5.1/itch.exe" ]; then

        WINE_OK=1
        WINE_3

        export FTP_URL="https://itch.io/app/download?platform=windows"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/itch-setup.exe"`

        export SW_USE_PFX="pfx_itch"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/itch-setup.exe" --silent "$@"

        while pgrep -fa 'itch-setup' &>/dev/null ; do sleep 1 ; done

        "${WINESERVER}" -k

        SW_USE_EXE="drive_c/users/steamuser/AppData/Local/itch/app-25.5.1/itch.exe"
        SW_USE_WINE="wine_proton_ge"

        try_remove_file "${START_WINE_PATH}/data/tmp/itch-setup.exe"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_WORLDOFSEABATTLE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_WorldOfSeaBattleClient/drive_c/World Of Sea Battle/WorldOfSeaBattleClient.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_WorldOfSeaBattleClient"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/WorldOfSeaBattle_0.1/WorldOfSeaBattle_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/WorldOfSeaBattle_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/WorldOfSeaBattle_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/WorldOfSeaBattle_0.1.tar.xz"

        SW_USE_EXE="drive_c/World Of Sea Battle/WorldOfSeaBattleClient.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="xna40"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_BSGLAUNCHER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_BsgLauncher/drive_c/Battlestate Games/BsgLauncher/BsgLauncher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_BsgLauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/BattlestateGames_0.1/BattlestateGames_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/BattlestateGames_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/BattlestateGames_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/BattlestateGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Battlestate Games/BsgLauncher/BsgLauncher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="dotnet48 vcrun2022"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_CROSSOUT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_CrossOut/drive_c/Crossout/CrossOut.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_CrossOut"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Crossout_0.1/Crossout_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Crossout_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Crossout_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Crossout_0.1.tar.xz"

        SW_USE_EXE="drive_c/Crossout/CrossOut.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_CALIBER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Caliber/drive_c/Program Files (x86)/1C Game Studios/Caliber/Caliber.exe" ]; then

        try_remove_file "${START_WINE_PATH}/data/tmp/steam-proton-6.3.8.tar.xz" &&
        try_remove_dir "${START_WINE_PATH}/data/tmp/steam-proton-6.3.8"

        if [ ! -f "${START_WINE_PATH}/data/wine/wine_custom/wine_for_Caliber/bin/wine" ]; then
            export FTP_URL="https://github.com/RusNor/Wine-Steam-Proton/releases/download/steam-proton-6.3.8/steam-proton-6.3.8.tar.xz"
            crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/steam-proton-6.3.8.tar.xz"` &&
            create_new_dir "${START_WINE_PATH}/data/wine/wine_custom/wine_for_Caliber"
            crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/steam-proton-6.3.8.tar.xz" "${START_WINE_PATH}/data/tmp"` &&

            for copy_dir in bin lib lib64 share ; do
                try_copy_dir "${START_WINE_PATH}/data/tmp/steam-proton-6.3.8/${copy_dir}" "${START_WINE_PATH}/data/wine/wine_custom/wine_for_Caliber"
            done

            try_remove_file "${START_WINE_PATH}/data/tmp/steam-proton-6.3.8.tar.xz" &&
            try_remove_dir "${START_WINE_PATH}/data/tmp/steam-proton-6.3.8"
        fi

        chmod -R 775 "${START_WINE_PATH}/data/wine/wine_custom/wine_for_Caliber"

        export SW_USE_PFX="pfx_Caliber"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_custom/wine_for_Caliber"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Caliber_0.1/Caliber_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Caliber_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Caliber_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Caliber_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/1C Game Studios/Caliber/Caliber.exe"
        SW_USE_WINE="wine_custom/wine_for_Caliber"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_LESTA_GAME () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_lgc_api/drive_c/ProgramData/Lesta/GameCenter/api/lgc_api.exe" ]; then

        WINE_OK=1
        WINE_3
        WINE_5

        export SW_USE_PFX="pfx_lgc_api"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_lutris_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Lesta_0.1/Lesta_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Lesta_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Lesta_0.1.tar.xz" "${WINEPREFIX}/drive_c/ProgramData"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Lesta_0.1.tar.xz"

        SW_USE_EXE="drive_c/ProgramData/Lesta/GameCenter/api/lgc_api.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="vcrun2022"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_STALCRAFT_LAUNCHER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_ExboLauncher/drive_c/EXBO/java/bin/ExboLauncher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_ExboLauncher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Stalcraft_0.1/Stalcraft_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Stalcraft_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Stalcraft_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Stalcraft_0.1.tar.xz"

        SW_USE_EXE="drive_c/EXBO/java/bin/ExboLauncher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_LINEAGE_LAUNCHER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Lineage/drive_c/GameCoast Games/launcher/Lineage.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Lineage"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Lineage_0.1/Lineage_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Lineage_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Lineage_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Lineage_0.1.tar.xz"

        SW_USE_EXE="drive_c/GameCoast Games/launcher/Lineage.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_PLARIUMPLAY () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_PlariumPlay/drive_c/users/$USER/AppData/Local/PlariumPlay/PlariumPlay.exe" ]; then

        WINE_OK=1
        WINE_5

        export FTP_URL="https://plarium.com/services/api/downloads/desktop?lid=1&arc=64&os=windows"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/PlariumPlaySetup.exe"`

        export SW_USE_PFX="pfx_PlariumPlay"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_lutris_ge"
        export WINELOADER=$WINEDIR/bin/wine

        "${WINELOADER}" "${START_WINE_PATH}/data/tmp/PlariumPlaySetup.exe" "$@"

        SW_USE_EXE="drive_c/users/$USER/AppData/Local/PlariumPlay/PlariumPlay.exe"
        SW_USE_WINE="wine_lutris_ge"

        try_remove_file "${START_WINE_PATH}/data/tmp/PlariumPlaySetup.exe"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_PATHOFEXILE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_PathOfExile/drive_c/Grinding Gear Games/Path of Exile/PathOfExile.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_PathOfExile"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/GrindingGearGames_0.1/GrindingGearGames_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GrindingGearGames_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/GrindingGearGames_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/GrindingGearGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Grinding Gear Games/Path of Exile/PathOfExile.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_STALKERONLINE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_StalkerOnline_Launcher/drive_c/StalkerOnline/StalkerOnline Launcher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_StalkerOnline_Launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/StalkerOnline_0.1/StalkerOnline_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/StalkerOnline_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/StalkerOnline_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/StalkerOnline_0.1.tar.xz"

        SW_USE_EXE="drive_c/StalkerOnline/StalkerOnline Launcher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="d3dcompiler_42 d3dcompiler_43 d3dcompiler_46 d3dcompiler_47 d3dx9 vcrun2012 vcrun2019"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_ANOMALY_ZONE () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Anomaly_Zone/drive_c/Cybertime Games/Anomaly-Zone/Anomaly Zone.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Anomaly_Zone"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/CybertimeGames_0.1/CybertimeGames_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/CybertimeGames_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/CybertimeGames_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/CybertimeGames_0.1.tar.xz"

        SW_USE_EXE="drive_c/Cybertime Games/Anomaly-Zone/Anomaly Zone.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="d3dcompiler_42 d3dcompiler_43 d3dcompiler_46 d3dcompiler_47 d3dx9 vcrun2005 vcrun2019"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_NINTENDO_SWITCH () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_yuzu/drive_c/yuzu/yuzu.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_yuzu"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/yuzu_0.1/yuzu_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/yuzu_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/yuzu_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/yuzu_0.1.tar.xz"

        SW_USE_EXE="drive_c/yuzu/yuzu.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="vcrun2019"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi


}

INSTALL_STARWARS_TOR () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Star_Wars_TOR/drive_c/Electronic Arts/BioWare/Star Wars - The Old Republic/Star Wars TOR.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Star_Wars_TOR"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/StarWarsTOR_0.1/StarWarsTOR_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/StarWarsTOR_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/StarWarsTOR_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/StarWarsTOR_0.1.tar.xz"

        SW_USE_EXE="drive_c/Electronic Arts/BioWare/Star Wars - The Old Republic/Star Wars TOR.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="d3dcompiler_47 d3dx9"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi


}

INSTALL_POPCOTIME () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_PopcoTime/drive_c/PopcoTime/PopcoTime.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_PopcoTime"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/PopcoTime_0.1/PopcoTime_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/PopcoTime_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/PopcoTime_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/PopcoTime_0.1.tar.xz"

        SW_USE_EXE="drive_c/PopcoTime/PopcoTime.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="d3dcompiler_47 d3dx9 vcrun2019"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_GAMEXP () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_GameXP_Launcher/drive_c/Launcher/GameXP Launcher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_GameXP_Launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/GameXPLauncher_0.1/GameXPLauncher_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GameXPLauncher_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/GameXPLauncher_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/GameXPLauncher_0.1.tar.xz"

        SW_USE_EXE="drive_c/Launcher/GameXP Launcher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="d3dcompiler_47 d3dx9 vcrun2019"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_RPG_CLUB () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_RPG_Club/drive_c/RPG-Club/RPG Club.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_RPG_Club"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/RPG-Club_0.1/RPG-Club_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/RPG-Club_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/RPG-Club_0.1.tar.xz" "${WINEPREFIX}/drive_c"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/RPG-Club_0.1.tar.xz"

        SW_USE_EXE="drive_c/RPG-Club/RPG Club.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_GENSHIN_IMPACT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_launcher/drive_c/Program Files/Genshin Impact/launcher.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_launcher"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/GenshinImpact_0.1/GenshinImpact_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/GenshinImpact_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/GenshinImpact_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/GenshinImpact_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files/Genshin Impact/launcher.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        export DLL="vcrun2010 vcrun2012 vcrun2013 vcrun2022"
        export INSTALL_OK=1

        SW_WINETRICKS

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_LOST_LIGHT () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_Lost_Light/drive_c/Program Files (x86)/LostLight/Lost Light.exe" ]; then

        WINE_OK=1
        WINE_3

        export SW_USE_PFX="pfx_Lost_Light"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_proton_ge"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/LostLight_0.1/LostLight_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/LostLight_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/LostLight_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/LostLight_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/LostLight/Lost Light.exe"
        SW_USE_WINE="wine_proton_ge"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

INSTALL_ROBLOXPLAYER () {

    if [ ! -f "${START_WINE_PATH}/data/pfx/pfx_RobloxPlayerBeta/drive_c/Program Files (x86)/Roblox/Versions/Roblox/RobloxPlayerBeta.exe" ]; then

        WINE_OK=1
        WINE_4

        export SW_USE_PFX="pfx_RobloxPlayerBeta"
        export WINEPREFIX="${START_WINE_PATH}/data/pfx/${SW_USE_PFX}"
        export WINEDIR="${START_WINE_PATH}/data/wine/wine_lutris"
        export WINELOADER=$WINEDIR/bin/wine

        try_fix_pfx

        export FTP_URL="https://github.com/RusNor/Autoinstall-Launchers-Data/releases/download/Roblox_0.1/Roblox_0.1.tar.xz"
        crier=`$CRIER -d "${FTP_URL}" "${START_WINE_PATH}/data/tmp/Roblox_0.1.tar.xz"`
        crier=`$CRIER -tar "${START_WINE_PATH}/data/tmp/Roblox_0.1.tar.xz" "${WINEPREFIX}/drive_c/Program Files (x86)"` &&
        try_remove_file "${START_WINE_PATH}/data/tmp/Roblox_0.1.tar.xz"

        SW_USE_EXE="drive_c/Program Files (x86)/Roblox/Versions/Roblox/RobloxPlayerBeta.exe"
        SW_USE_WINE="wine_lutris"

        sw_shortcuts_autoinstall

        crier=`$CRIER -i "$(eval_gettext "Application installed successfully")"`

    else

        crier=`$CRIER -i "$(eval_gettext "Application is installed")"`

    fi

}

#################################   THE END   ##################################
