#!/usr/bin/env python3

import os
from sys import argv
from pathlib import Path
from subprocess import run, PIPE
from multiprocessing import Process
import time

#######################___PATHS__:

sw_default_path = Path(f'{Path.home()}/.local/share')
swrc = Path(f'{Path.home()}/.config/swrc')

if swrc.exists():
    swrc_path = swrc.read_text().splitlines()[0]
    sw_scripts = Path(f'{swrc_path}/data/scripts')
else:
    if Path(f'{sw_default_path}/StartWine/data/scripts').exists():
        sw_scripts = Path(f'{sw_default_path}/StartWine/data/scripts')
    else:
        sw_scripts = Path(argv[0]).absolute().parent

sw_path = sw_scripts.parent.parent
sw_menu = Path(f"{sw_scripts}/sw_menu.py")
sw_crier = Path(f"{sw_scripts}/sw_crier.py")
sw_cube = Path(f"{sw_scripts}/sw_cube.py")
sw_tray =  Path(f"{sw_scripts}/sw_tray.py")
sw_rsh = Path(f"{sw_scripts}/sw_run.sh")
sw_run = Path(f"{sw_scripts}/sw_run")
sw_start_local = Path(f'{sw_default_path}/StartWine/data/scripts/sw_start')
sw_start_bin = Path(f'/usr/bin/sw_start')
sw_start_rc = Path(f'{sw_scripts}/sw_start')

################################___START___:

def silent_start(arg):

    run(f'"{sw_menu}" "--silent"', shell=True)

def _run(arg, cmd_run):

    if arg is not None and arg != '%F':
        if Path(arg).suffix == '.desktop':
            arg = [x.split('=')[1] for x in Path(arg).read_text().splitlines() if 'Exec=' in x]
            if len(arg) > 0:
                exe = [x for x in arg[0].split('"') if '.exe' in x.lower()]
                msi = [x for x in arg[0].split('"') if '.msi' in x.lower()]
                bat = [x for x in arg[0].split('"') if '.bat' in x.lower()]
                lnk = [x for x in arg[0].split('"') if '.lnk' in x.lower()]
                if len(exe) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{exe[0]}"')
                elif len(msi) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{msi[0]}"')
                elif len(bat) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{bat[0]}"')
                elif len(lnk) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{lnk[0]}"')
                else:
                    sw_rsh.write_text(f'env "{sw_menu}"')
            else:
                sw_rsh.write_text(f'env "{sw_menu}"')
        else:
            sw_rsh.write_text(f'env "{sw_menu}" "{arg}"')
    else:
        sw_rsh.write_text(f'env "{sw_menu}"')

    return run(f'/bin/bash -c "{cmd_run}" 2>/dev/null', shell=True)

def _show(arg, cmd_show):

    if arg is not None and arg != '%F':
        if Path(arg).suffix == '.desktop':
            arg = [x.split('=')[1].strip('"') for x in Path(arg).read_text().splitlines() if 'Exec=' in x]
            if len(arg) > 0:
                exe = [x for x in arg[0].split('"') if '.exe' in x.lower()]
                msi = [x for x in arg[0].split('"') if '.msi' in x.lower()]
                bat = [x for x in arg[0].split('"') if '.bat' in x.lower()]
                lnk = [x for x in arg[0].split('"') if '.lnk' in x.lower()]
                if len(exe) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{exe[0]}"')
                elif len(msi) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{msi[0]}"')
                elif len(bat) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{bat[0]}"')
                elif len(lnk) > 0:
                    sw_rsh.write_text(f'env "{sw_menu}" "{lnk[0]}"')
                else:
                    sw_rsh.write_text(f'env "{sw_menu}"')
            else:
                sw_rsh.write_text(f'env "{sw_menu}"')
        else:
            sw_rsh.write_text(f'env "{sw_menu}" "{arg}"')
    else:
        sw_rsh.write_text(f'env "{sw_menu}"')

    return run(f'/bin/bash -c "{cmd_show}" 2>/dev/null', shell=True)

def on_start(arg, cmd):

    cmd_show = 'gdbus call -e \
--dest ru.project.StartWine \
--object-path /ru/project/StartWine \
--method ru.project.StartWine.Show'

    cmd_run = 'gdbus call -e \
--dest ru.project.StartWine \
--object-path /ru/project/StartWine \
--method ru.project.StartWine.Run'

    cmd_active = 'gdbus call -e \
--dest ru.project.StartWine \
--object-path /ru/project/StartWine \
--method ru.project.StartWine.Active \
"active"'

    out = run(
            f'/bin/bash -c "{cmd_active}" 2>/dev/null',
            shell=True, stdout=PIPE, encoding='UTF-8'
    )
    if out.stdout == '':
        p = Process(target=silent_start, args=(arg,))
        p.start()
        out = ''
        while out == '':
            out = run(f'/bin/bash -c "{cmd_active}" 2>/dev/null',
                        shell=True, stdout=PIPE, encoding='UTF-8').stdout
            time.sleep(0.1)
        else:
            if cmd == '--run':
                Process(target=_run, args=(arg, cmd_run)).start()
            else:
                Process(target=_show, args=(arg, cmd_show)).start()
    else:
        if cmd == '--run':
            Process(target=_run, args=(arg, cmd_run)).start()
        else:
            Process(target=_show, args=(arg, cmd_show)).start()

def on_cube():

    try:
        run(f'mangohud --dlsym cube -v', shell=True)
    except IOError as e:
        print(f'{e}')

def on_tray():

    try:
        run(f'"{sw_tray}"', shell=True, start_new_session=True)
    except IOError as e:
        print(f'{e}')

def on_crier(args):

    try:
        run(f"{sw_crier} {args}", shell=True, start_new_session=True)
    except IOError as e:
        print(f'{e}')

def on_helper():

    sw_start_help = '''
    -c or --cube                          run opengl cube
    -t or --tray                          run StartWine in tray
    -d or --dialog ('-h' for print help)  run dialogs window with message
    -p or --path                          run StartWine path chooser
    -h or --help                          print this help info
    '''
    print(sw_start_help)

if __name__ == '__main__':

    if len(argv) <= 1:
        on_start(None, None)

    elif len(argv) > 1:

        if argv[1] == '--cube' or argv[1] == '-c':
            on_cube()

        elif argv[1] == '--tray' or argv[1] == '-t':
            on_tray()

        elif argv[1] == '--dialog' or argv[1] == '-d':
            if len(argv) > 2:
                args = argv[2]
                on_crier(args)
            else:
                on_helper()

        elif argv[1] == '--path' or argv[1] == '-p':
            if len(argv) > 2:
                args = '-p ' + str(argv[2])
                on_crier(args)
            elif len(argv) == 2:
                args = '-p ' + str(sw_default_path)
                on_crier(args)
            else:
                on_helper()

        elif argv[1] == '--help' or argv[1] == '-h':
            on_helper()

        else:
            arg = argv[1]
            if len(argv) > 2:
                cmd = argv[2]
                on_start(arg, cmd)
            else:
                on_start(arg, None)

